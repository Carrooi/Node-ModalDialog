/** Generated by SimQ **/
/** modules **/

// Generated by CoffeeScript 1.6.3
(function() {
  var SUPPORTED, cache, modules, require, resolve, stats;

  if (!this.require) {
    SUPPORTED = ['js', 'json', 'ts', 'coffee', 'eco'];
    modules = {};
    stats = {};
    cache = {};
    require = function(name, parent) {
      var fullName, m;
      if (parent == null) {
        parent = null;
      }
      fullName = resolve(name, parent);
      if (fullName === null) {
        throw new Error('Module ' + name + ' was not found.');
      }
      if (typeof cache[fullName] === 'undefined') {
        m = {
          exports: {},
          id: fullName,
          filename: fullName,
          loaded: false,
          parent: null,
          children: null
        };
        modules[fullName].apply(window, [m.exports, m]);
        m.loaded = true;
        cache[fullName] = m;
      }
      if (typeof stats[fullName] === 'undefined') {
        stats[fullName] = {
          atime: null,
          mtime: null,
          ctime: null
        };
      }
      stats[fullName].atime = new Date;
      return cache[fullName].exports;
    };
    resolve = function(name, parent) {
      var ext, num, part, parts, prev, result, _i, _j, _k, _len, _len1, _len2;
      if (parent == null) {
        parent = null;
      }
      if (parent !== null && name[0] === '.') {
        num = parent.lastIndexOf('/');
        if (num !== -1) {
          parent = parent.substr(0, num);
        }
        name = parent + '/' + name;
        parts = name.split('/');
        result = [];
        prev = null;
        for (_i = 0, _len = parts.length; _i < _len; _i++) {
          part = parts[_i];
          if (part === '.' || part === '') {
            continue;
          } else if (part === '..' && prev) {
            result.pop();
          } else {
            result.push(part);
          }
          prev = part;
        }
        name = result.join('/');
        if (parent[0] === '/') {
          name = '/' + name;
        }
      }
      if (typeof modules[name] !== 'undefined') {
        return name;
      }
      for (_j = 0, _len1 = SUPPORTED.length; _j < _len1; _j++) {
        ext = SUPPORTED[_j];
        if (typeof modules[name + '.' + ext] !== 'undefined') {
          return name + '.' + ext;
        }
      }
      for (_k = 0, _len2 = SUPPORTED.length; _k < _len2; _k++) {
        ext = SUPPORTED[_k];
        if (typeof modules[name + '/index.' + ext] !== 'undefined') {
          return name + '/index.' + ext;
        }
      }
      return null;
    };
    this.require = function(name, parent) {
      if (parent == null) {
        parent = null;
      }
      return require(name, parent);
    };
    this.require.simq = true;
    this.require.version = 1;
    this.require.resolve = function(name, parent) {
      if (parent == null) {
        parent = null;
      }
      return resolve(name, parent);
    };
    this.require.define = function(bundle) {
      var m, name, _results;
      _results = [];
      for (name in bundle) {
        m = bundle[name];
        _results.push(modules[name] = m);
      }
      return _results;
    };
    this.require.release = function() {
      var name, _results;
      _results = [];
      for (name in cache) {
        _results.push(delete cache[name]);
      }
      return _results;
    };
    this.require.getStats = function(name, parent) {
      var fullName;
      if (parent == null) {
        parent = null;
      }
      fullName = resolve(name, parent);
      if (fullName === null) {
        throw new Error('Module ' + name + ' was not found.');
      }
      if (typeof stats[fullName] === 'undefined') {
        stats[fullName] = {
          atime: null,
          mtime: null,
          ctime: null
        };
      }
      return stats[fullName];
    };
    this.require.__setStats = function(bundle) {
      var data, name, _results;
      _results = [];
      for (name in bundle) {
        data = bundle[name];
        _results.push(stats[name] = {
          atime: new Date(data.atime),
          mtime: new Date(data.mtime),
          ctime: new Date(data.ctime)
        });
      }
      return _results;
    };
    this.require.cache = cache;
  }

  return this.require.define;

}).call(this)({
 'q/q.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'q/q.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'q/q.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'q/q.js';
	var __dirname = 'q';
	var process = {cwd: function() {return '/';}, argv: ['node', 'q/q.js'], env: {}};

	/** code **/
	// vim:ts=4:sts=4:sw=4:
	/*!
	 *
	 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
	 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
	 *
	 * With parts by Tyler Close
	 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
	 * at http://www.opensource.org/licenses/mit-license.html
	 * Forked at ref_send.js version: 2009-05-11
	 *
	 * With parts by Mark Miller
	 * Copyright (C) 2011 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	
	(function (definition) {
	    // Turn off strict mode for this function so we can assign to global.Q
	    /* jshint strict: false */
	
	    // This file will function properly as a <script> tag, or a module
	    // using CommonJS and NodeJS or RequireJS module formats.  In
	    // Common/Node/RequireJS, the module exports the Q API and when
	    // executed as a simple <script>, it creates a Q global instead.
	
	    // Montage Require
	    if (typeof bootstrap === "function") {
	        bootstrap("promise", definition);
	
	    // CommonJS
	    } else if (typeof exports === "object") {
	        module.exports = definition();
	
	    // RequireJS
	    } else if (typeof define === "function" && define.amd) {
	        define(definition);
	
	    // SES (Secure EcmaScript)
	    } else if (typeof ses !== "undefined") {
	        if (!ses.ok()) {
	            return;
	        } else {
	            ses.makeQ = definition;
	        }
	
	    // <script>
	    } else {
	        Q = definition();
	    }
	
	})(function () {
	"use strict";
	
	var hasStacks = false;
	try {
	    throw new Error();
	} catch (e) {
	    hasStacks = !!e.stack;
	}
	
	// All code after this point will be filtered from stack traces reported
	// by Q.
	var qStartingLine = captureLine();
	var qFileName;
	
	// shims
	
	// used for fallback in "allResolved"
	var noop = function () {};
	
	// Use the fastest possible means to execute a task in a future turn
	// of the event loop.
	var nextTick =(function () {
	    // linked list of tasks (single, with head node)
	    var head = {task: void 0, next: null};
	    var tail = head;
	    var flushing = false;
	    var requestTick = void 0;
	    var isNodeJS = false;
	
	    function flush() {
	        /* jshint loopfunc: true */
	
	        while (head.next) {
	            head = head.next;
	            var task = head.task;
	            head.task = void 0;
	            var domain = head.domain;
	
	            if (domain) {
	                head.domain = void 0;
	                domain.enter();
	            }
	
	            try {
	                task();
	
	            } catch (e) {
	                if (isNodeJS) {
	                    // In node, uncaught exceptions are considered fatal errors.
	                    // Re-throw them synchronously to interrupt flushing!
	
	                    // Ensure continuation if the uncaught exception is suppressed
	                    // listening "uncaughtException" events (as domains does).
	                    // Continue in next event to avoid tick recursion.
	                    if (domain) {
	                        domain.exit();
	                    }
	                    setTimeout(flush, 0);
	                    if (domain) {
	                        domain.enter();
	                    }
	
	                    throw e;
	
	                } else {
	                    // In browsers, uncaught exceptions are not fatal.
	                    // Re-throw them asynchronously to avoid slow-downs.
	                    setTimeout(function() {
	                       throw e;
	                    }, 0);
	                }
	            }
	
	            if (domain) {
	                domain.exit();
	            }
	        }
	
	        flushing = false;
	    }
	
	    nextTick = function (task) {
	        tail = tail.next = {
	            task: task,
	            domain: isNodeJS && process.domain,
	            next: null
	        };
	
	        if (!flushing) {
	            flushing = true;
	            requestTick();
	        }
	    };
	
	    if (typeof process !== "undefined" && process.nextTick) {
	        // Node.js before 0.9. Note that some fake-Node environments, like the
	        // Mocha test runner, introduce a `process` global without a `nextTick`.
	        isNodeJS = true;
	
	        requestTick = function () {
	            process.nextTick(flush);
	        };
	
	    } else if (typeof setImmediate === "function") {
	        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
	        if (typeof window !== "undefined") {
	            requestTick = setImmediate.bind(window, flush);
	        } else {
	            requestTick = function () {
	                setImmediate(flush);
	            };
	        }
	
	    } else if (typeof MessageChannel !== "undefined") {
	        // modern browsers
	        // http://www.nonblocking.io/2011/06/windownexttick.html
	        var channel = new MessageChannel();
	        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
	        // working message ports the first time a page loads.
	        channel.port1.onmessage = function () {
	            requestTick = requestPortTick;
	            channel.port1.onmessage = flush;
	            flush();
	        };
	        var requestPortTick = function () {
	            // Opera requires us to provide a message payload, regardless of
	            // whether we use it.
	            channel.port2.postMessage(0);
	        };
	        requestTick = function () {
	            setTimeout(flush, 0);
	            requestPortTick();
	        };
	
	    } else {
	        // old browsers
	        requestTick = function () {
	            setTimeout(flush, 0);
	        };
	    }
	
	    return nextTick;
	})();
	
	// Attempt to make generics safe in the face of downstream
	// modifications.
	// There is no situation where this is necessary.
	// If you need a security guarantee, these primordials need to be
	// deeply frozen anyway, and if you don’t need a security guarantee,
	// this is just plain paranoid.
	// However, this does have the nice side-effect of reducing the size
	// of the code by reducing x.call() to merely x(), eliminating many
	// hard-to-minify characters.
	// See Mark Miller’s explanation of what this does.
	// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
	var call = Function.call;
	function uncurryThis(f) {
	    return function () {
	        return call.apply(f, arguments);
	    };
	}
	// This is equivalent, but slower:
	// uncurryThis = Function_bind.bind(Function_bind.call);
	// http://jsperf.com/uncurrythis
	
	var array_slice = uncurryThis(Array.prototype.slice);
	
	var array_reduce = uncurryThis(
	    Array.prototype.reduce || function (callback, basis) {
	        var index = 0,
	            length = this.length;
	        // concerning the initial value, if one is not provided
	        if (arguments.length === 1) {
	            // seek to the first value in the array, accounting
	            // for the possibility that is is a sparse array
	            do {
	                if (index in this) {
	                    basis = this[index++];
	                    break;
	                }
	                if (++index >= length) {
	                    throw new TypeError();
	                }
	            } while (1);
	        }
	        // reduce
	        for (; index < length; index++) {
	            // account for the possibility that the array is sparse
	            if (index in this) {
	                basis = callback(basis, this[index], index);
	            }
	        }
	        return basis;
	    }
	);
	
	var array_indexOf = uncurryThis(
	    Array.prototype.indexOf || function (value) {
	        // not a very good shim, but good enough for our one use of it
	        for (var i = 0; i < this.length; i++) {
	            if (this[i] === value) {
	                return i;
	            }
	        }
	        return -1;
	    }
	);
	
	var array_map = uncurryThis(
	    Array.prototype.map || function (callback, thisp) {
	        var self = this;
	        var collect = [];
	        array_reduce(self, function (undefined, value, index) {
	            collect.push(callback.call(thisp, value, index, self));
	        }, void 0);
	        return collect;
	    }
	);
	
	var object_create = Object.create || function (prototype) {
	    function Type() { }
	    Type.prototype = prototype;
	    return new Type();
	};
	
	var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
	
	var object_keys = Object.keys || function (object) {
	    var keys = [];
	    for (var key in object) {
	        if (object_hasOwnProperty(object, key)) {
	            keys.push(key);
	        }
	    }
	    return keys;
	};
	
	var object_toString = uncurryThis(Object.prototype.toString);
	
	function isObject(value) {
	    return value === Object(value);
	}
	
	// generator related shims
	
	// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
	function isStopIteration(exception) {
	    return (
	        object_toString(exception) === "[object StopIteration]" ||
	        exception instanceof QReturnValue
	    );
	}
	
	// FIXME: Remove this helper and Q.return once ES6 generators are in
	// SpiderMonkey.
	var QReturnValue;
	if (typeof ReturnValue !== "undefined") {
	    QReturnValue = ReturnValue;
	} else {
	    QReturnValue = function (value) {
	        this.value = value;
	    };
	}
	
	// Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
	// engine that has a deployed base of browsers that support generators.
	// However, SM's generators use the Python-inspired semantics of
	// outdated ES6 drafts.  We would like to support ES6, but we'd also
	// like to make it possible to use generators in deployed browsers, so
	// we also support Python-style generators.  At some point we can remove
	// this block.
	var hasES6Generators;
	try {
	    /* jshint evil: true, nonew: false */
	    new Function("(function* (){ yield 1; })");
	    hasES6Generators = true;
	} catch (e) {
	    hasES6Generators = false;
	}
	
	// long stack traces
	
	var STACK_JUMP_SEPARATOR = "From previous event:";
	
	function makeStackTraceLong(error, promise) {
	    // If possible, transform the error stack trace by removing Node and Q
	    // cruft, then concatenating with the stack trace of `promise`. See #57.
	    if (hasStacks &&
	        promise.stack &&
	        typeof error === "object" &&
	        error !== null &&
	        error.stack &&
	        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
	    ) {
	        var stacks = [];
	        for (var p = promise; !!p; p = p.source) {
	            if (p.stack) {
	                stacks.unshift(p.stack);
	            }
	        }
	        stacks.unshift(error.stack);
	
	        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
	        error.stack = filterStackString(concatedStacks);
	    }
	}
	
	function filterStackString(stackString) {
	    var lines = stackString.split("\n");
	    var desiredLines = [];
	    for (var i = 0; i < lines.length; ++i) {
	        var line = lines[i];
	
	        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
	            desiredLines.push(line);
	        }
	    }
	    return desiredLines.join("\n");
	}
	
	function isNodeFrame(stackLine) {
	    return stackLine.indexOf("(module.js:") !== -1 ||
	           stackLine.indexOf("(node.js:") !== -1;
	}
	
	function getFileNameAndLineNumber(stackLine) {
	    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
	    // In IE10 function name can have spaces ("Anonymous function") O_o
	    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
	    if (attempt1) {
	        return [attempt1[1], Number(attempt1[2])];
	    }
	
	    // Anonymous functions: "at filename:lineNumber:columnNumber"
	    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
	    if (attempt2) {
	        return [attempt2[1], Number(attempt2[2])];
	    }
	
	    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
	    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
	    if (attempt3) {
	        return [attempt3[1], Number(attempt3[2])];
	    }
	}
	
	function isInternalFrame(stackLine) {
	    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
	
	    if (!fileNameAndLineNumber) {
	        return false;
	    }
	
	    var fileName = fileNameAndLineNumber[0];
	    var lineNumber = fileNameAndLineNumber[1];
	
	    return fileName === qFileName &&
	        lineNumber >= qStartingLine &&
	        lineNumber <= qEndingLine;
	}
	
	// discover own file name and line number range for filtering stack
	// traces
	function captureLine() {
	    if (!hasStacks) {
	        return;
	    }
	
	    try {
	        throw new Error();
	    } catch (e) {
	        var lines = e.stack.split("\n");
	        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
	        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
	        if (!fileNameAndLineNumber) {
	            return;
	        }
	
	        qFileName = fileNameAndLineNumber[0];
	        return fileNameAndLineNumber[1];
	    }
	}
	
	function deprecate(callback, name, alternative) {
	    return function () {
	        if (typeof console !== "undefined" &&
	            typeof console.warn === "function") {
	            console.warn(name + " is deprecated, use " + alternative +
	                         " instead.", new Error("").stack);
	        }
	        return callback.apply(callback, arguments);
	    };
	}
	
	// end of shims
	// beginning of real work
	
	/**
	 * Constructs a promise for an immediate reference, passes promises through, or
	 * coerces promises from different systems.
	 * @param value immediate reference or promise
	 */
	function Q(value) {
	    // If the object is already a Promise, return it directly.  This enables
	    // the resolve function to both be used to created references from objects,
	    // but to tolerably coerce non-promises to promises.
	    if (isPromise(value)) {
	        return value;
	    }
	
	    // assimilate thenables
	    if (isPromiseAlike(value)) {
	        return coerce(value);
	    } else {
	        return fulfill(value);
	    }
	}
	Q.resolve = Q;
	
	/**
	 * Performs a task in a future turn of the event loop.
	 * @param {Function} task
	 */
	Q.nextTick = nextTick;
	
	/**
	 * Controls whether or not long stack traces will be on
	 */
	Q.longStackSupport = false;
	
	/**
	 * Constructs a {promise, resolve, reject} object.
	 *
	 * `resolve` is a callback to invoke with a more resolved value for the
	 * promise. To fulfill the promise, invoke `resolve` with any value that is
	 * not a thenable. To reject the promise, invoke `resolve` with a rejected
	 * thenable, or invoke `reject` with the reason directly. To resolve the
	 * promise to another thenable, thus putting it in the same state, invoke
	 * `resolve` with that other thenable.
	 */
	Q.defer = defer;
	function defer() {
	    // if "messages" is an "Array", that indicates that the promise has not yet
	    // been resolved.  If it is "undefined", it has been resolved.  Each
	    // element of the messages array is itself an array of complete arguments to
	    // forward to the resolved promise.  We coerce the resolution value to a
	    // promise using the `resolve` function because it handles both fully
	    // non-thenable values and other thenables gracefully.
	    var messages = [], progressListeners = [], resolvedPromise;
	
	    var deferred = object_create(defer.prototype);
	    var promise = object_create(Promise.prototype);
	
	    promise.promiseDispatch = function (resolve, op, operands) {
	        var args = array_slice(arguments);
	        if (messages) {
	            messages.push(args);
	            if (op === "when" && operands[1]) { // progress operand
	                progressListeners.push(operands[1]);
	            }
	        } else {
	            nextTick(function () {
	                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
	            });
	        }
	    };
	
	    // XXX deprecated
	    promise.valueOf = deprecate(function () {
	        if (messages) {
	            return promise;
	        }
	        var nearerValue = nearer(resolvedPromise);
	        if (isPromise(nearerValue)) {
	            resolvedPromise = nearerValue; // shorten chain
	        }
	        return nearerValue;
	    }, "valueOf", "inspect");
	
	    promise.inspect = function () {
	        if (!resolvedPromise) {
	            return { state: "pending" };
	        }
	        return resolvedPromise.inspect();
	    };
	
	    if (Q.longStackSupport && hasStacks) {
	        try {
	            throw new Error();
	        } catch (e) {
	            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
	            // accessor around; that causes memory leaks as per GH-111. Just
	            // reify the stack trace as a string ASAP.
	            //
	            // At the same time, cut off the first line; it's always just
	            // "[object Promise]\n", as per the `toString`.
	            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
	        }
	    }
	
	    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
	    // consolidating them into `become`, since otherwise we'd create new
	    // promises with the lines `become(whatever(value))`. See e.g. GH-252.
	
	    function become(newPromise) {
	        resolvedPromise = newPromise;
	        promise.source = newPromise;
	
	        array_reduce(messages, function (undefined, message) {
	            nextTick(function () {
	                newPromise.promiseDispatch.apply(newPromise, message);
	            });
	        }, void 0);
	
	        messages = void 0;
	        progressListeners = void 0;
	    }
	
	    deferred.promise = promise;
	    deferred.resolve = function (value) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        become(Q(value));
	    };
	
	    deferred.fulfill = function (value) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        become(fulfill(value));
	    };
	    deferred.reject = function (reason) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        become(reject(reason));
	    };
	    deferred.notify = function (progress) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        array_reduce(progressListeners, function (undefined, progressListener) {
	            nextTick(function () {
	                progressListener(progress);
	            });
	        }, void 0);
	    };
	
	    return deferred;
	}
	
	/**
	 * Creates a Node-style callback that will resolve or reject the deferred
	 * promise.
	 * @returns a nodeback
	 */
	defer.prototype.makeNodeResolver = function () {
	    var self = this;
	    return function (error, value) {
	        if (error) {
	            self.reject(error);
	        } else if (arguments.length > 2) {
	            self.resolve(array_slice(arguments, 1));
	        } else {
	            self.resolve(value);
	        }
	    };
	};
	
	/**
	 * @param resolver {Function} a function that returns nothing and accepts
	 * the resolve, reject, and notify functions for a deferred.
	 * @returns a promise that may be resolved with the given resolve and reject
	 * functions, or rejected by a thrown exception in resolver
	 */
	Q.promise = promise;
	function promise(resolver) {
	    if (typeof resolver !== "function") {
	        throw new TypeError("resolver must be a function.");
	    }
	    var deferred = defer();
	    try {
	        resolver(deferred.resolve, deferred.reject, deferred.notify);
	    } catch (reason) {
	        deferred.reject(reason);
	    }
	    return deferred.promise;
	}
	
	// XXX experimental.  This method is a way to denote that a local value is
	// serializable and should be immediately dispatched to a remote upon request,
	// instead of passing a reference.
	Q.passByCopy = function (object) {
	    //freeze(object);
	    //passByCopies.set(object, true);
	    return object;
	};
	
	Promise.prototype.passByCopy = function () {
	    //freeze(object);
	    //passByCopies.set(object, true);
	    return this;
	};
	
	/**
	 * If two promises eventually fulfill to the same value, promises that value,
	 * but otherwise rejects.
	 * @param x {Any*}
	 * @param y {Any*}
	 * @returns {Any*} a promise for x and y if they are the same, but a rejection
	 * otherwise.
	 *
	 */
	Q.join = function (x, y) {
	    return Q(x).join(y);
	};
	
	Promise.prototype.join = function (that) {
	    return Q([this, that]).spread(function (x, y) {
	        if (x === y) {
	            // TODO: "===" should be Object.is or equiv
	            return x;
	        } else {
	            throw new Error("Can't join: not the same: " + x + " " + y);
	        }
	    });
	};
	
	/**
	 * Returns a promise for the first of an array of promises to become fulfilled.
	 * @param answers {Array[Any*]} promises to race
	 * @returns {Any*} the first promise to be fulfilled
	 */
	Q.race = race;
	function race(answerPs) {
	    return promise(function(resolve, reject) {
	        // Switch to this once we can assume at least ES5
	        // answerPs.forEach(function(answerP) {
	        //     Q(answerP).then(resolve, reject);
	        // });
	        // Use this in the meantime
	        for (var i = 0, len = answerPs.length; i < len; i++) {
	            Q(answerPs[i]).then(resolve, reject);
	        }
	    });
	}
	
	Promise.prototype.race = function () {
	    return this.then(Q.race);
	};
	
	/**
	 * Constructs a Promise with a promise descriptor object and optional fallback
	 * function.  The descriptor contains methods like when(rejected), get(name),
	 * set(name, value), post(name, args), and delete(name), which all
	 * return either a value, a promise for a value, or a rejection.  The fallback
	 * accepts the operation name, a resolver, and any further arguments that would
	 * have been forwarded to the appropriate method above had a method been
	 * provided with the proper name.  The API makes no guarantees about the nature
	 * of the returned object, apart from that it is usable whereever promises are
	 * bought and sold.
	 */
	Q.makePromise = Promise;
	function Promise(descriptor, fallback, inspect) {
	    if (fallback === void 0) {
	        fallback = function (op) {
	            return reject(new Error(
	                "Promise does not support operation: " + op
	            ));
	        };
	    }
	    if (inspect === void 0) {
	        inspect = function () {
	            return {state: "unknown"};
	        };
	    }
	
	    var promise = object_create(Promise.prototype);
	
	    promise.promiseDispatch = function (resolve, op, args) {
	        var result;
	        try {
	            if (descriptor[op]) {
	                result = descriptor[op].apply(promise, args);
	            } else {
	                result = fallback.call(promise, op, args);
	            }
	        } catch (exception) {
	            result = reject(exception);
	        }
	        if (resolve) {
	            resolve(result);
	        }
	    };
	
	    promise.inspect = inspect;
	
	    // XXX deprecated `valueOf` and `exception` support
	    if (inspect) {
	        var inspected = inspect();
	        if (inspected.state === "rejected") {
	            promise.exception = inspected.reason;
	        }
	
	        promise.valueOf = deprecate(function () {
	            var inspected = inspect();
	            if (inspected.state === "pending" ||
	                inspected.state === "rejected") {
	                return promise;
	            }
	            return inspected.value;
	        });
	    }
	
	    return promise;
	}
	
	Promise.prototype.toString = function () {
	    return "[object Promise]";
	};
	
	Promise.prototype.then = function (fulfilled, rejected, progressed) {
	    var self = this;
	    var deferred = defer();
	    var done = false;   // ensure the untrusted promise makes at most a
	                        // single call to one of the callbacks
	
	    function _fulfilled(value) {
	        try {
	            return typeof fulfilled === "function" ? fulfilled(value) : value;
	        } catch (exception) {
	            return reject(exception);
	        }
	    }
	
	    function _rejected(exception) {
	        if (typeof rejected === "function") {
	            makeStackTraceLong(exception, self);
	            try {
	                return rejected(exception);
	            } catch (newException) {
	                return reject(newException);
	            }
	        }
	        return reject(exception);
	    }
	
	    function _progressed(value) {
	        return typeof progressed === "function" ? progressed(value) : value;
	    }
	
	    nextTick(function () {
	        self.promiseDispatch(function (value) {
	            if (done) {
	                return;
	            }
	            done = true;
	
	            deferred.resolve(_fulfilled(value));
	        }, "when", [function (exception) {
	            if (done) {
	                return;
	            }
	            done = true;
	
	            deferred.resolve(_rejected(exception));
	        }]);
	    });
	
	    // Progress propagator need to be attached in the current tick.
	    self.promiseDispatch(void 0, "when", [void 0, function (value) {
	        var newValue;
	        var threw = false;
	        try {
	            newValue = _progressed(value);
	        } catch (e) {
	            threw = true;
	            if (Q.onerror) {
	                Q.onerror(e);
	            } else {
	                throw e;
	            }
	        }
	
	        if (!threw) {
	            deferred.notify(newValue);
	        }
	    }]);
	
	    return deferred.promise;
	};
	
	/**
	 * Registers an observer on a promise.
	 *
	 * Guarantees:
	 *
	 * 1. that fulfilled and rejected will be called only once.
	 * 2. that either the fulfilled callback or the rejected callback will be
	 *    called, but not both.
	 * 3. that fulfilled and rejected will not be called in this turn.
	 *
	 * @param value      promise or immediate reference to observe
	 * @param fulfilled  function to be called with the fulfilled value
	 * @param rejected   function to be called with the rejection exception
	 * @param progressed function to be called on any progress notifications
	 * @return promise for the return value from the invoked callback
	 */
	Q.when = when;
	function when(value, fulfilled, rejected, progressed) {
	    return Q(value).then(fulfilled, rejected, progressed);
	}
	
	Promise.prototype.thenResolve = function (value) {
	    return this.then(function () { return value; });
	};
	
	Q.thenResolve = function (promise, value) {
	    return Q(promise).thenResolve(value);
	};
	
	Promise.prototype.thenReject = function (reason) {
	    return this.then(function () { throw reason; });
	};
	
	Q.thenReject = function (promise, reason) {
	    return Q(promise).thenReject(reason);
	};
	
	/**
	 * If an object is not a promise, it is as "near" as possible.
	 * If a promise is rejected, it is as "near" as possible too.
	 * If it’s a fulfilled promise, the fulfillment value is nearer.
	 * If it’s a deferred promise and the deferred has been resolved, the
	 * resolution is "nearer".
	 * @param object
	 * @returns most resolved (nearest) form of the object
	 */
	
	// XXX should we re-do this?
	Q.nearer = nearer;
	function nearer(value) {
	    if (isPromise(value)) {
	        var inspected = value.inspect();
	        if (inspected.state === "fulfilled") {
	            return inspected.value;
	        }
	    }
	    return value;
	}
	
	/**
	 * @returns whether the given object is a promise.
	 * Otherwise it is a fulfilled value.
	 */
	Q.isPromise = isPromise;
	function isPromise(object) {
	    return isObject(object) &&
	        typeof object.promiseDispatch === "function" &&
	        typeof object.inspect === "function";
	}
	
	Q.isPromiseAlike = isPromiseAlike;
	function isPromiseAlike(object) {
	    return isObject(object) && typeof object.then === "function";
	}
	
	/**
	 * @returns whether the given object is a pending promise, meaning not
	 * fulfilled or rejected.
	 */
	Q.isPending = isPending;
	function isPending(object) {
	    return isPromise(object) && object.inspect().state === "pending";
	}
	
	Promise.prototype.isPending = function () {
	    return this.inspect().state === "pending";
	};
	
	/**
	 * @returns whether the given object is a value or fulfilled
	 * promise.
	 */
	Q.isFulfilled = isFulfilled;
	function isFulfilled(object) {
	    return !isPromise(object) || object.inspect().state === "fulfilled";
	}
	
	Promise.prototype.isFulfilled = function () {
	    return this.inspect().state === "fulfilled";
	};
	
	/**
	 * @returns whether the given object is a rejected promise.
	 */
	Q.isRejected = isRejected;
	function isRejected(object) {
	    return isPromise(object) && object.inspect().state === "rejected";
	}
	
	Promise.prototype.isRejected = function () {
	    return this.inspect().state === "rejected";
	};
	
	//// BEGIN UNHANDLED REJECTION TRACKING
	
	// This promise library consumes exceptions thrown in handlers so they can be
	// handled by a subsequent promise.  The exceptions get added to this array when
	// they are created, and removed when they are handled.  Note that in ES6 or
	// shimmed environments, this would naturally be a `Set`.
	var unhandledReasons = [];
	var unhandledRejections = [];
	var unhandledReasonsDisplayed = false;
	var trackUnhandledRejections = true;
	function displayUnhandledReasons() {
	    if (
	        !unhandledReasonsDisplayed &&
	        typeof window !== "undefined" &&
	        !window.Touch &&
	        window.console
	    ) {
	        console.warn("[Q] Unhandled rejection reasons (should be empty):",
	                     unhandledReasons);
	    }
	
	    unhandledReasonsDisplayed = true;
	}
	
	function logUnhandledReasons() {
	    for (var i = 0; i < unhandledReasons.length; i++) {
	        var reason = unhandledReasons[i];
	        console.warn("Unhandled rejection reason:", reason);
	    }
	}
	
	function resetUnhandledRejections() {
	    unhandledReasons.length = 0;
	    unhandledRejections.length = 0;
	    unhandledReasonsDisplayed = false;
	
	    if (!trackUnhandledRejections) {
	        trackUnhandledRejections = true;
	
	        // Show unhandled rejection reasons if Node exits without handling an
	        // outstanding rejection.  (Note that Browserify presently produces a
	        // `process` global without the `EventEmitter` `on` method.)
	        if (typeof process !== "undefined" && process.on) {
	            process.on("exit", logUnhandledReasons);
	        }
	    }
	}
	
	function trackRejection(promise, reason) {
	    if (!trackUnhandledRejections) {
	        return;
	    }
	
	    unhandledRejections.push(promise);
	    if (reason && typeof reason.stack !== "undefined") {
	        unhandledReasons.push(reason.stack);
	    } else {
	        unhandledReasons.push("(no stack) " + reason);
	    }
	    displayUnhandledReasons();
	}
	
	function untrackRejection(promise) {
	    if (!trackUnhandledRejections) {
	        return;
	    }
	
	    var at = array_indexOf(unhandledRejections, promise);
	    if (at !== -1) {
	        unhandledRejections.splice(at, 1);
	        unhandledReasons.splice(at, 1);
	    }
	}
	
	Q.resetUnhandledRejections = resetUnhandledRejections;
	
	Q.getUnhandledReasons = function () {
	    // Make a copy so that consumers can't interfere with our internal state.
	    return unhandledReasons.slice();
	};
	
	Q.stopUnhandledRejectionTracking = function () {
	    resetUnhandledRejections();
	    if (typeof process !== "undefined" && process.on) {
	        process.removeListener("exit", logUnhandledReasons);
	    }
	    trackUnhandledRejections = false;
	};
	
	resetUnhandledRejections();
	
	//// END UNHANDLED REJECTION TRACKING
	
	/**
	 * Constructs a rejected promise.
	 * @param reason value describing the failure
	 */
	Q.reject = reject;
	function reject(reason) {
	    var rejection = Promise({
	        "when": function (rejected) {
	            // note that the error has been handled
	            if (rejected) {
	                untrackRejection(this);
	            }
	            return rejected ? rejected(reason) : this;
	        }
	    }, function fallback() {
	        return this;
	    }, function inspect() {
	        return { state: "rejected", reason: reason };
	    });
	
	    // Note that the reason has not been handled.
	    trackRejection(rejection, reason);
	
	    return rejection;
	}
	
	/**
	 * Constructs a fulfilled promise for an immediate reference.
	 * @param value immediate reference
	 */
	Q.fulfill = fulfill;
	function fulfill(value) {
	    return Promise({
	        "when": function () {
	            return value;
	        },
	        "get": function (name) {
	            return value[name];
	        },
	        "set": function (name, rhs) {
	            value[name] = rhs;
	        },
	        "delete": function (name) {
	            delete value[name];
	        },
	        "post": function (name, args) {
	            // Mark Miller proposes that post with no name should apply a
	            // promised function.
	            if (name === null || name === void 0) {
	                return value.apply(void 0, args);
	            } else {
	                return value[name].apply(value, args);
	            }
	        },
	        "apply": function (thisp, args) {
	            return value.apply(thisp, args);
	        },
	        "keys": function () {
	            return object_keys(value);
	        }
	    }, void 0, function inspect() {
	        return { state: "fulfilled", value: value };
	    });
	}
	
	/**
	 * Converts thenables to Q promises.
	 * @param promise thenable promise
	 * @returns a Q promise
	 */
	function coerce(promise) {
	    var deferred = defer();
	    nextTick(function () {
	        try {
	            promise.then(deferred.resolve, deferred.reject, deferred.notify);
	        } catch (exception) {
	            deferred.reject(exception);
	        }
	    });
	    return deferred.promise;
	}
	
	/**
	 * Annotates an object such that it will never be
	 * transferred away from this process over any promise
	 * communication channel.
	 * @param object
	 * @returns promise a wrapping of that object that
	 * additionally responds to the "isDef" message
	 * without a rejection.
	 */
	Q.master = master;
	function master(object) {
	    return Promise({
	        "isDef": function () {}
	    }, function fallback(op, args) {
	        return dispatch(object, op, args);
	    }, function () {
	        return Q(object).inspect();
	    });
	}
	
	/**
	 * Spreads the values of a promised array of arguments into the
	 * fulfillment callback.
	 * @param fulfilled callback that receives variadic arguments from the
	 * promised array
	 * @param rejected callback that receives the exception if the promise
	 * is rejected.
	 * @returns a promise for the return value or thrown exception of
	 * either callback.
	 */
	Q.spread = spread;
	function spread(value, fulfilled, rejected) {
	    return Q(value).spread(fulfilled, rejected);
	}
	
	Promise.prototype.spread = function (fulfilled, rejected) {
	    return this.all().then(function (array) {
	        return fulfilled.apply(void 0, array);
	    }, rejected);
	};
	
	/**
	 * The async function is a decorator for generator functions, turning
	 * them into asynchronous generators.  Although generators are only part
	 * of the newest ECMAScript 6 drafts, this code does not cause syntax
	 * errors in older engines.  This code should continue to work and will
	 * in fact improve over time as the language improves.
	 *
	 * ES6 generators are currently part of V8 version 3.19 with the
	 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
	 * for longer, but under an older Python-inspired form.  This function
	 * works on both kinds of generators.
	 *
	 * Decorates a generator function such that:
	 *  - it may yield promises
	 *  - execution will continue when that promise is fulfilled
	 *  - the value of the yield expression will be the fulfilled value
	 *  - it returns a promise for the return value (when the generator
	 *    stops iterating)
	 *  - the decorated function returns a promise for the return value
	 *    of the generator or the first rejected promise among those
	 *    yielded.
	 *  - if an error is thrown in the generator, it propagates through
	 *    every following yield until it is caught, or until it escapes
	 *    the generator function altogether, and is translated into a
	 *    rejection for the promise returned by the decorated generator.
	 */
	Q.async = async;
	function async(makeGenerator) {
	    return function () {
	        // when verb is "send", arg is a value
	        // when verb is "throw", arg is an exception
	        function continuer(verb, arg) {
	            var result;
	            if (hasES6Generators) {
	                try {
	                    result = generator[verb](arg);
	                } catch (exception) {
	                    return reject(exception);
	                }
	                if (result.done) {
	                    return result.value;
	                } else {
	                    return when(result.value, callback, errback);
	                }
	            } else {
	                // FIXME: Remove this case when SM does ES6 generators.
	                try {
	                    result = generator[verb](arg);
	                } catch (exception) {
	                    if (isStopIteration(exception)) {
	                        return exception.value;
	                    } else {
	                        return reject(exception);
	                    }
	                }
	                return when(result, callback, errback);
	            }
	        }
	        var generator = makeGenerator.apply(this, arguments);
	        var callback = continuer.bind(continuer, "next");
	        var errback = continuer.bind(continuer, "throw");
	        return callback();
	    };
	}
	
	/**
	 * The spawn function is a small wrapper around async that immediately
	 * calls the generator and also ends the promise chain, so that any
	 * unhandled errors are thrown instead of forwarded to the error
	 * handler. This is useful because it's extremely common to run
	 * generators at the top-level to work with libraries.
	 */
	Q.spawn = spawn;
	function spawn(makeGenerator) {
	    Q.done(Q.async(makeGenerator)());
	}
	
	// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
	/**
	 * Throws a ReturnValue exception to stop an asynchronous generator.
	 *
	 * This interface is a stop-gap measure to support generator return
	 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
	 * generators like Chromium 29, just use "return" in your generator
	 * functions.
	 *
	 * @param value the return value for the surrounding generator
	 * @throws ReturnValue exception with the value.
	 * @example
	 * // ES6 style
	 * Q.async(function* () {
	 *      var foo = yield getFooPromise();
	 *      var bar = yield getBarPromise();
	 *      return foo + bar;
	 * })
	 * // Older SpiderMonkey style
	 * Q.async(function () {
	 *      var foo = yield getFooPromise();
	 *      var bar = yield getBarPromise();
	 *      Q.return(foo + bar);
	 * })
	 */
	Q["return"] = _return;
	function _return(value) {
	    throw new QReturnValue(value);
	}
	
	/**
	 * The promised function decorator ensures that any promise arguments
	 * are settled and passed as values (`this` is also settled and passed
	 * as a value).  It will also ensure that the result of a function is
	 * always a promise.
	 *
	 * @example
	 * var add = Q.promised(function (a, b) {
	 *     return a + b;
	 * });
	 * add(Q(a), Q(B));
	 *
	 * @param {function} callback The function to decorate
	 * @returns {function} a function that has been decorated.
	 */
	Q.promised = promised;
	function promised(callback) {
	    return function () {
	        return spread([this, all(arguments)], function (self, args) {
	            return callback.apply(self, args);
	        });
	    };
	}
	
	/**
	 * sends a message to a value in a future turn
	 * @param object* the recipient
	 * @param op the name of the message operation, e.g., "when",
	 * @param args further arguments to be forwarded to the operation
	 * @returns result {Promise} a promise for the result of the operation
	 */
	Q.dispatch = dispatch;
	function dispatch(object, op, args) {
	    return Q(object).dispatch(op, args);
	}
	
	Promise.prototype.dispatch = function (op, args) {
	    var self = this;
	    var deferred = defer();
	    nextTick(function () {
	        self.promiseDispatch(deferred.resolve, op, args);
	    });
	    return deferred.promise;
	};
	
	/**
	 * Gets the value of a property in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of property to get
	 * @return promise for the property value
	 */
	Q.get = function (object, key) {
	    return Q(object).dispatch("get", [key]);
	};
	
	Promise.prototype.get = function (key) {
	    return this.dispatch("get", [key]);
	};
	
	/**
	 * Sets the value of a property in a future turn.
	 * @param object    promise or immediate reference for object object
	 * @param name      name of property to set
	 * @param value     new value of property
	 * @return promise for the return value
	 */
	Q.set = function (object, key, value) {
	    return Q(object).dispatch("set", [key, value]);
	};
	
	Promise.prototype.set = function (key, value) {
	    return this.dispatch("set", [key, value]);
	};
	
	/**
	 * Deletes a property in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of property to delete
	 * @return promise for the return value
	 */
	Q.del = // XXX legacy
	Q["delete"] = function (object, key) {
	    return Q(object).dispatch("delete", [key]);
	};
	
	Promise.prototype.del = // XXX legacy
	Promise.prototype["delete"] = function (key) {
	    return this.dispatch("delete", [key]);
	};
	
	/**
	 * Invokes a method in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of method to invoke
	 * @param value     a value to post, typically an array of
	 *                  invocation arguments for promises that
	 *                  are ultimately backed with `resolve` values,
	 *                  as opposed to those backed with URLs
	 *                  wherein the posted value can be any
	 *                  JSON serializable object.
	 * @return promise for the return value
	 */
	// bound locally because it is used by other methods
	Q.mapply = // XXX As proposed by "Redsandro"
	Q.post = function (object, name, args) {
	    return Q(object).dispatch("post", [name, args]);
	};
	
	Promise.prototype.mapply = // XXX As proposed by "Redsandro"
	Promise.prototype.post = function (name, args) {
	    return this.dispatch("post", [name, args]);
	};
	
	/**
	 * Invokes a method in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of method to invoke
	 * @param ...args   array of invocation arguments
	 * @return promise for the return value
	 */
	Q.send = // XXX Mark Miller's proposed parlance
	Q.mcall = // XXX As proposed by "Redsandro"
	Q.invoke = function (object, name /*...args*/) {
	    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
	};
	
	Promise.prototype.send = // XXX Mark Miller's proposed parlance
	Promise.prototype.mcall = // XXX As proposed by "Redsandro"
	Promise.prototype.invoke = function (name /*...args*/) {
	    return this.dispatch("post", [name, array_slice(arguments, 1)]);
	};
	
	/**
	 * Applies the promised function in a future turn.
	 * @param object    promise or immediate reference for target function
	 * @param args      array of application arguments
	 */
	Q.fapply = function (object, args) {
	    return Q(object).dispatch("apply", [void 0, args]);
	};
	
	Promise.prototype.fapply = function (args) {
	    return this.dispatch("apply", [void 0, args]);
	};
	
	/**
	 * Calls the promised function in a future turn.
	 * @param object    promise or immediate reference for target function
	 * @param ...args   array of application arguments
	 */
	Q["try"] =
	Q.fcall = function (object /* ...args*/) {
	    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
	};
	
	Promise.prototype.fcall = function (/*...args*/) {
	    return this.dispatch("apply", [void 0, array_slice(arguments)]);
	};
	
	/**
	 * Binds the promised function, transforming return values into a fulfilled
	 * promise and thrown errors into a rejected one.
	 * @param object    promise or immediate reference for target function
	 * @param ...args   array of application arguments
	 */
	Q.fbind = function (object /*...args*/) {
	    var promise = Q(object);
	    var args = array_slice(arguments, 1);
	    return function fbound() {
	        return promise.dispatch("apply", [
	            this,
	            args.concat(array_slice(arguments))
	        ]);
	    };
	};
	Promise.prototype.fbind = function (/*...args*/) {
	    var promise = this;
	    var args = array_slice(arguments);
	    return function fbound() {
	        return promise.dispatch("apply", [
	            this,
	            args.concat(array_slice(arguments))
	        ]);
	    };
	};
	
	/**
	 * Requests the names of the owned properties of a promised
	 * object in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @return promise for the keys of the eventually settled object
	 */
	Q.keys = function (object) {
	    return Q(object).dispatch("keys", []);
	};
	
	Promise.prototype.keys = function () {
	    return this.dispatch("keys", []);
	};
	
	/**
	 * Turns an array of promises into a promise for an array.  If any of
	 * the promises gets rejected, the whole array is rejected immediately.
	 * @param {Array*} an array (or promise for an array) of values (or
	 * promises for values)
	 * @returns a promise for an array of the corresponding values
	 */
	// By Mark Miller
	// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
	Q.all = all;
	function all(promises) {
	    return when(promises, function (promises) {
	        var countDown = 0;
	        var deferred = defer();
	        array_reduce(promises, function (undefined, promise, index) {
	            var snapshot;
	            if (
	                isPromise(promise) &&
	                (snapshot = promise.inspect()).state === "fulfilled"
	            ) {
	                promises[index] = snapshot.value;
	            } else {
	                ++countDown;
	                when(
	                    promise,
	                    function (value) {
	                        promises[index] = value;
	                        if (--countDown === 0) {
	                            deferred.resolve(promises);
	                        }
	                    },
	                    deferred.reject,
	                    function (progress) {
	                        deferred.notify({ index: index, value: progress });
	                    }
	                );
	            }
	        }, void 0);
	        if (countDown === 0) {
	            deferred.resolve(promises);
	        }
	        return deferred.promise;
	    });
	}
	
	Promise.prototype.all = function () {
	    return all(this);
	};
	
	/**
	 * Waits for all promises to be settled, either fulfilled or
	 * rejected.  This is distinct from `all` since that would stop
	 * waiting at the first rejection.  The promise returned by
	 * `allResolved` will never be rejected.
	 * @param promises a promise for an array (or an array) of promises
	 * (or values)
	 * @return a promise for an array of promises
	 */
	Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
	function allResolved(promises) {
	    return when(promises, function (promises) {
	        promises = array_map(promises, Q);
	        return when(all(array_map(promises, function (promise) {
	            return when(promise, noop, noop);
	        })), function () {
	            return promises;
	        });
	    });
	}
	
	Promise.prototype.allResolved = function () {
	    return allResolved(this);
	};
	
	/**
	 * @see Promise#allSettled
	 */
	Q.allSettled = allSettled;
	function allSettled(promises) {
	    return Q(promises).allSettled();
	}
	
	/**
	 * Turns an array of promises into a promise for an array of their states (as
	 * returned by `inspect`) when they have all settled.
	 * @param {Array[Any*]} values an array (or promise for an array) of values (or
	 * promises for values)
	 * @returns {Array[State]} an array of states for the respective values.
	 */
	Promise.prototype.allSettled = function () {
	    return this.then(function (promises) {
	        return all(array_map(promises, function (promise) {
	            promise = Q(promise);
	            function regardless() {
	                return promise.inspect();
	            }
	            return promise.then(regardless, regardless);
	        }));
	    });
	};
	
	/**
	 * Captures the failure of a promise, giving an oportunity to recover
	 * with a callback.  If the given promise is fulfilled, the returned
	 * promise is fulfilled.
	 * @param {Any*} promise for something
	 * @param {Function} callback to fulfill the returned promise if the
	 * given promise is rejected
	 * @returns a promise for the return value of the callback
	 */
	Q.fail = // XXX legacy
	Q["catch"] = function (object, rejected) {
	    return Q(object).then(void 0, rejected);
	};
	
	Promise.prototype.fail = // XXX legacy
	Promise.prototype["catch"] = function (rejected) {
	    return this.then(void 0, rejected);
	};
	
	/**
	 * Attaches a listener that can respond to progress notifications from a
	 * promise's originating deferred. This listener receives the exact arguments
	 * passed to ``deferred.notify``.
	 * @param {Any*} promise for something
	 * @param {Function} callback to receive any progress notifications
	 * @returns the given promise, unchanged
	 */
	Q.progress = progress;
	function progress(object, progressed) {
	    return Q(object).then(void 0, void 0, progressed);
	}
	
	Promise.prototype.progress = function (progressed) {
	    return this.then(void 0, void 0, progressed);
	};
	
	/**
	 * Provides an opportunity to observe the settling of a promise,
	 * regardless of whether the promise is fulfilled or rejected.  Forwards
	 * the resolution to the returned promise when the callback is done.
	 * The callback can return a promise to defer completion.
	 * @param {Any*} promise
	 * @param {Function} callback to observe the resolution of the given
	 * promise, takes no arguments.
	 * @returns a promise for the resolution of the given promise when
	 * ``fin`` is done.
	 */
	Q.fin = // XXX legacy
	Q["finally"] = function (object, callback) {
	    return Q(object)["finally"](callback);
	};
	
	Promise.prototype.fin = // XXX legacy
	Promise.prototype["finally"] = function (callback) {
	    callback = Q(callback);
	    return this.then(function (value) {
	        return callback.fcall().then(function () {
	            return value;
	        });
	    }, function (reason) {
	        // TODO attempt to recycle the rejection with "this".
	        return callback.fcall().then(function () {
	            throw reason;
	        });
	    });
	};
	
	/**
	 * Terminates a chain of promises, forcing rejections to be
	 * thrown as exceptions.
	 * @param {Any*} promise at the end of a chain of promises
	 * @returns nothing
	 */
	Q.done = function (object, fulfilled, rejected, progress) {
	    return Q(object).done(fulfilled, rejected, progress);
	};
	
	Promise.prototype.done = function (fulfilled, rejected, progress) {
	    var onUnhandledError = function (error) {
	        // forward to a future turn so that ``when``
	        // does not catch it and turn it into a rejection.
	        nextTick(function () {
	            makeStackTraceLong(error, promise);
	            if (Q.onerror) {
	                Q.onerror(error);
	            } else {
	                throw error;
	            }
	        });
	    };
	
	    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
	    var promise = fulfilled || rejected || progress ?
	        this.then(fulfilled, rejected, progress) :
	        this;
	
	    if (typeof process === "object" && process && process.domain) {
	        onUnhandledError = process.domain.bind(onUnhandledError);
	    }
	
	    promise.then(void 0, onUnhandledError);
	};
	
	/**
	 * Causes a promise to be rejected if it does not get fulfilled before
	 * some milliseconds time out.
	 * @param {Any*} promise
	 * @param {Number} milliseconds timeout
	 * @param {String} custom error message (optional)
	 * @returns a promise for the resolution of the given promise if it is
	 * fulfilled before the timeout, otherwise rejected.
	 */
	Q.timeout = function (object, ms, message) {
	    return Q(object).timeout(ms, message);
	};
	
	Promise.prototype.timeout = function (ms, message) {
	    var deferred = defer();
	    var timeoutId = setTimeout(function () {
	        deferred.reject(new Error(message || "Timed out after " + ms + " ms"));
	    }, ms);
	
	    this.then(function (value) {
	        clearTimeout(timeoutId);
	        deferred.resolve(value);
	    }, function (exception) {
	        clearTimeout(timeoutId);
	        deferred.reject(exception);
	    }, deferred.notify);
	
	    return deferred.promise;
	};
	
	/**
	 * Returns a promise for the given value (or promised value), some
	 * milliseconds after it resolved. Passes rejections immediately.
	 * @param {Any*} promise
	 * @param {Number} milliseconds
	 * @returns a promise for the resolution of the given promise after milliseconds
	 * time has elapsed since the resolution of the given promise.
	 * If the given promise rejects, that is passed immediately.
	 */
	Q.delay = function (object, timeout) {
	    if (timeout === void 0) {
	        timeout = object;
	        object = void 0;
	    }
	    return Q(object).delay(timeout);
	};
	
	Promise.prototype.delay = function (timeout) {
	    return this.then(function (value) {
	        var deferred = defer();
	        setTimeout(function () {
	            deferred.resolve(value);
	        }, timeout);
	        return deferred.promise;
	    });
	};
	
	/**
	 * Passes a continuation to a Node function, which is called with the given
	 * arguments provided as an array, and returns a promise.
	 *
	 *      Q.nfapply(FS.readFile, [__filename])
	 *      .then(function (content) {
	 *      })
	 *
	 */
	Q.nfapply = function (callback, args) {
	    return Q(callback).nfapply(args);
	};
	
	Promise.prototype.nfapply = function (args) {
	    var deferred = defer();
	    var nodeArgs = array_slice(args);
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.fapply(nodeArgs).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * Passes a continuation to a Node function, which is called with the given
	 * arguments provided individually, and returns a promise.
	 * @example
	 * Q.nfcall(FS.readFile, __filename)
	 * .then(function (content) {
	 * })
	 *
	 */
	Q.nfcall = function (callback /*...args*/) {
	    var args = array_slice(arguments, 1);
	    return Q(callback).nfapply(args);
	};
	
	Promise.prototype.nfcall = function (/*...args*/) {
	    var nodeArgs = array_slice(arguments);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.fapply(nodeArgs).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * Wraps a NodeJS continuation passing function and returns an equivalent
	 * version that returns a promise.
	 * @example
	 * Q.nfbind(FS.readFile, __filename)("utf-8")
	 * .then(console.log)
	 * .done()
	 */
	Q.nfbind =
	Q.denodeify = function (callback /*...args*/) {
	    var baseArgs = array_slice(arguments, 1);
	    return function () {
	        var nodeArgs = baseArgs.concat(array_slice(arguments));
	        var deferred = defer();
	        nodeArgs.push(deferred.makeNodeResolver());
	        Q(callback).fapply(nodeArgs).fail(deferred.reject);
	        return deferred.promise;
	    };
	};
	
	Promise.prototype.nfbind =
	Promise.prototype.denodeify = function (/*...args*/) {
	    var args = array_slice(arguments);
	    args.unshift(this);
	    return Q.denodeify.apply(void 0, args);
	};
	
	Q.nbind = function (callback, thisp /*...args*/) {
	    var baseArgs = array_slice(arguments, 2);
	    return function () {
	        var nodeArgs = baseArgs.concat(array_slice(arguments));
	        var deferred = defer();
	        nodeArgs.push(deferred.makeNodeResolver());
	        function bound() {
	            return callback.apply(thisp, arguments);
	        }
	        Q(bound).fapply(nodeArgs).fail(deferred.reject);
	        return deferred.promise;
	    };
	};
	
	Promise.prototype.nbind = function (/*thisp, ...args*/) {
	    var args = array_slice(arguments, 0);
	    args.unshift(this);
	    return Q.nbind.apply(void 0, args);
	};
	
	/**
	 * Calls a method of a Node-style object that accepts a Node-style
	 * callback with a given array of arguments, plus a provided callback.
	 * @param object an object that has the named method
	 * @param {String} name name of the method of object
	 * @param {Array} args arguments to pass to the method; the callback
	 * will be provided by Q and appended to these arguments.
	 * @returns a promise for the value or error
	 */
	Q.nmapply = // XXX As proposed by "Redsandro"
	Q.npost = function (object, name, args) {
	    return Q(object).npost(name, args);
	};
	
	Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
	Promise.prototype.npost = function (name, args) {
	    var nodeArgs = array_slice(args || []);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * Calls a method of a Node-style object that accepts a Node-style
	 * callback, forwarding the given variadic arguments, plus a provided
	 * callback argument.
	 * @param object an object that has the named method
	 * @param {String} name name of the method of object
	 * @param ...args arguments to pass to the method; the callback will
	 * be provided by Q and appended to these arguments.
	 * @returns a promise for the value or error
	 */
	Q.nsend = // XXX Based on Mark Miller's proposed "send"
	Q.nmcall = // XXX Based on "Redsandro's" proposal
	Q.ninvoke = function (object, name /*...args*/) {
	    var nodeArgs = array_slice(arguments, 2);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};
	
	Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
	Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
	Promise.prototype.ninvoke = function (name /*...args*/) {
	    var nodeArgs = array_slice(arguments, 1);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * If a function would like to support both Node continuation-passing-style and
	 * promise-returning-style, it can end its internal promise chain with
	 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
	 * elects to use a nodeback, the result will be sent there.  If they do not
	 * pass a nodeback, they will receive the result promise.
	 * @param object a result (or a promise for a result)
	 * @param {Function} nodeback a Node.js-style callback
	 * @returns either the promise or nothing
	 */
	Q.nodeify = nodeify;
	function nodeify(object, nodeback) {
	    return Q(object).nodeify(nodeback);
	}
	
	Promise.prototype.nodeify = function (nodeback) {
	    if (nodeback) {
	        this.then(function (value) {
	            nextTick(function () {
	                nodeback(null, value);
	            });
	        }, function (error) {
	            nextTick(function () {
	                nodeback(error);
	            });
	        });
	    } else {
	        return this;
	    }
	};
	
	// All code before this point will be filtered from stack traces.
	var qEndingLine = captureLine();
	
	return Q;
	
	});
	

}, 'overlay/lib/Overlay.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'overlay/lib/Overlay.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'overlay/lib/Overlay.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'overlay/lib/Overlay.js';
	var __dirname = 'overlay/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', 'overlay/lib/Overlay.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var $, EventEmitter, Overlay, Q, _ref,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
	
	  $ = window.jQuery || require('jquery');
	
	  Q = require('q');
	
	  EventEmitter = require('events').EventEmitter;
	
	  Overlay = (function(_super) {
	    __extends(Overlay, _super);
	
	    function Overlay() {
	      _ref = Overlay.__super__.constructor.apply(this, arguments);
	      return _ref;
	    }
	
	    Overlay.ID = '__dk-overlay';
	
	    Overlay.prototype.visible = false;
	
	    Overlay.prototype.color = 'black';
	
	    Overlay.prototype.opacity = 0.8;
	
	    Overlay.prototype.zIndex = 1000;
	
	    Overlay.prototype.duration = 'fast';
	
	    Overlay.prototype.scrollable = false;
	
	    Overlay.prototype.el = null;
	
	    Overlay.prototype.show = function(options) {
	      var deferred,
	        _this = this;
	      if (options == null) {
	        options = {};
	      }
	      deferred = Q.defer();
	      if (typeof options.color === 'undefined') {
	        options.color = this.color;
	      }
	      if (typeof options.opacity === 'undefined') {
	        options.opacity = this.opacity;
	      }
	      if (typeof options.zIndex === 'undefined') {
	        options.zIndex = this.zIndex;
	      }
	      if (typeof options.duration === 'undefined') {
	        options.duration = this.duration;
	      }
	      if (typeof options.scrollable === 'undefined') {
	        options.scrollable = this.scrollable;
	      }
	      if (this.visible === false) {
	        this.emit('show', this);
	        if (options.scrollable === false) {
	          $('body').css('overflow', 'hidden');
	        }
	        if (this.el === null) {
	          if ($('#' + Overlay.ID).length > 0) {
	            return Q.reject(new Error('There is already some element with id ' + Overlay.ID + '.'));
	          }
	          this.el = $('<div>', {
	            id: Overlay.ID,
	            css: {
	              display: 'none',
	              position: 'fixed',
	              left: 0,
	              top: 0,
	              width: $(window).width(),
	              height: $(window).height()
	            },
	            click: function(e) {
	              return _this.hide();
	            }
	          }).appendTo($('body'));
	        }
	        $(window).on('resize.overlay', function(e) {
	          return _this.onResize();
	        });
	        this.el.css({
	          backgroundColor: options.color,
	          opacity: options.opacity,
	          zIndex: options.zIndex
	        });
	        this.el.fadeIn(options.duration, function() {
	          _this.visible = true;
	          _this.emit('shown', _this);
	          return deferred.resolve(_this);
	        });
	      } else {
	        return Q.reject(new Error('Overlay is already visible'));
	      }
	      return deferred.promise;
	    };
	
	    Overlay.prototype.onResize = function() {
	      if (this.visible === true) {
	        return this.el.css({
	          width: $(window).width(),
	          height: $(window).height()
	        });
	      }
	    };
	
	    Overlay.prototype.hide = function() {
	      var deferred,
	        _this = this;
	      deferred = Q.defer();
	      if (this.visible === true) {
	        this.emit('hide', this);
	        this.el.fadeOut(this.duration, function() {
	          _this.visible = false;
	          _this.emit('hidden', _this);
	          return deferred.resolve(_this);
	        });
	        $(window).off('resize.overlay');
	        if (this.scrollable === false) {
	          $('body').css('overflow', 'visible');
	        }
	      } else {
	        deferred.reject(new Error('Overlay is not visible'));
	      }
	      return deferred.promise;
	    };
	
	    return Overlay;
	
	  })(EventEmitter);
	
	  module.exports = new Overlay;
	
	}).call(this);
	

}, 'content-ready/lib/Ready.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'content-ready/lib/Ready.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'content-ready/lib/Ready.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'content-ready/lib/Ready.js';
	var __dirname = 'content-ready/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', 'content-ready/lib/Ready.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var $, Q, err;
	
	  Q = require('q');
	
	  try {
	    $ = require('jquery');
	  } catch (_error) {
	    err = _error;
	    $ = window.jQuery;
	  }
	
	  module.exports = function(el) {
	    var counter, deferred, images, loaded;
	    deferred = Q.defer();
	    images = el.find('img');
	    counter = images.length;
	    if (counter === 0) {
	      deferred.resolve(el);
	    } else {
	      loaded = function() {
	        counter--;
	        if (counter === 0) {
	          return deferred.resolve(el);
	        }
	      };
	      images.each(function(i, image) {
	        if (image.complete) {
	          return loaded();
	        } else {
	          return $(image).one('load', loaded);
	        }
	      });
	    }
	    return deferred.promise;
	  };
	
	}).call(this);
	

}, '/src/ConfirmDialog.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/src/ConfirmDialog.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/src/ConfirmDialog.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/src/ConfirmDialog.coffee';
	var __dirname = '/src';
	var process = {cwd: function() {return '/';}, argv: ['node', '/src/ConfirmDialog.coffee'], env: {}};

	/** code **/
	(function() {
	  var ConfirmDialog, Dialog,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
	
	  Dialog = require('./Dialog');
	
	  ConfirmDialog = (function(_super) {
	    __extends(ConfirmDialog, _super);
	
	    ConfirmDialog.trueText = 'OK';
	
	    ConfirmDialog.falseText = 'Cancel';
	
	    ConfirmDialog.prototype.trueText = null;
	
	    ConfirmDialog.prototype.falseText = null;
	
	    function ConfirmDialog(jquery, content, trueText, falseText) {
	      var _this = this;
	      this.content = content;
	      this.trueText = trueText != null ? trueText : ConfirmDialog.trueText;
	      this.falseText = falseText != null ? falseText : ConfirmDialog.falseText;
	      ConfirmDialog.__super__.constructor.call(this, jquery);
	      this.addButton(this.trueText, function() {
	        return _this.emit('true', _this);
	      });
	      this.addButton(this.falseText, function() {
	        return _this.emit('false', _this);
	      });
	    }
	
	    return ConfirmDialog;
	
	  })(Dialog);
	
	  module.exports = ConfirmDialog;
	
	}).call(this);
	

}, '/src/Dialog.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/src/Dialog.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/src/Dialog.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/src/Dialog.coffee';
	var __dirname = '/src';
	var process = {cwd: function() {return '/';}, argv: ['node', '/src/Dialog.coffee'], env: {}};

	/** code **/
	(function() {
	  var $, Dialog, EventEmitter, Overlay, Q, ready,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
	
	  Q = require('q');
	
	  Overlay = require('overlay');
	
	  ready = require('content-ready');
	
	  EventEmitter = require('events').EventEmitter;
	
	  $ = null;
	
	  Dialog = (function(_super) {
	    __extends(Dialog, _super);
	
	    Dialog.visible = null;
	
	    Dialog.closing = false;
	
	    Dialog.overlayRegistered = false;
	
	    Dialog.classes = {
	      container: 'modal_dialog',
	      title: 'title',
	      header: 'header',
	      content: 'content',
	      footer: 'footer',
	      info: 'info',
	      buttons: 'buttons',
	      button: 'button'
	    };
	
	    Dialog.styles = true;
	
	    Dialog.prototype.options = null;
	
	    Dialog.prototype.title = null;
	
	    Dialog.prototype.header = null;
	
	    Dialog.prototype.content = null;
	
	    Dialog.prototype.footer = null;
	
	    Dialog.prototype.info = null;
	
	    Dialog.prototype.buttons = null;
	
	    Dialog.prototype.width = 430;
	
	    Dialog.prototype.maxHeight = 400;
	
	    Dialog.prototype.zIndex = 100000;
	
	    Dialog.prototype.duration = 'fast';
	
	    Dialog.prototype.el = null;
	
	    Dialog.prototype.elements = null;
	
	    function Dialog(jquery) {
	      var err,
	        _this = this;
	      if (jquery == null) {
	        jquery = null;
	      }
	      if (jquery === null) {
	        try {
	          jquery = require('jquery');
	        } catch (_error) {
	          err = _error;
	          jquery = window.jQuery;
	        }
	      }
	      if (!jquery) {
	        throw new Error('jquery is not defined.');
	      }
	      $ = jquery;
	      this.buttons = [];
	      this.elements = {};
	      if (Dialog.overlayRegistered === false) {
	        Dialog.overlayRegistered = true;
	        Overlay.on('hide', function() {
	          if (Dialog.visible !== null && Dialog.closing === false) {
	            return Dialog.visible.hide();
	          }
	        });
	      }
	    }
	
	    Dialog.prototype.addButton = function(title, action) {
	      this.buttons.push({
	        title: title,
	        action: action
	      });
	      return this;
	    };
	
	    Dialog.prototype.parseOptions = function(options) {
	      if (options == null) {
	        options = {};
	      }
	      if (typeof options.width === 'undefined') {
	        options.width = this.width;
	      }
	      if (typeof options.maxHeight === 'undefined') {
	        options.maxHeight = this.maxHeight;
	      }
	      if (typeof options.duration === 'undefined') {
	        options.duration = this.duration;
	      }
	      if (typeof options.zIndex === 'undefined') {
	        options.zIndex = this.zIndex;
	      }
	      if (typeof options.styles === 'undefined') {
	        options.styles = Dialog.styles;
	      }
	      if (typeof options.classes === 'undefined') {
	        options.classes = {};
	      }
	      if (typeof options.overlay === 'undefined') {
	        options.overlay = {};
	      }
	      if (typeof options.classes.container === 'undefined') {
	        options.classes.container = Dialog.classes.container;
	      }
	      if (typeof options.classes.title === 'undefined') {
	        options.classes.title = Dialog.classes.title;
	      }
	      if (typeof options.classes.header === 'undefined') {
	        options.classes.header = Dialog.classes.header;
	      }
	      if (typeof options.classes.content === 'undefined') {
	        options.classes.content = Dialog.classes.content;
	      }
	      if (typeof options.classes.footer === 'undefined') {
	        options.classes.footer = Dialog.classes.footer;
	      }
	      if (typeof options.classes.info === 'undefined') {
	        options.classes.info = Dialog.classes.info;
	      }
	      if (typeof options.classes.buttons === 'undefined') {
	        options.classes.buttons = Dialog.classes.buttons;
	      }
	      if (typeof options.classes.button === 'undefined') {
	        options.classes.button = Dialog.classes.button;
	      }
	      options.overlay.duration = options.duration;
	      return options;
	    };
	
	    Dialog.prototype.renderHeader = function() {
	      if (typeof this.elements.header === 'undefined') {
	        this.elements.header = $('<div>', {
	          'class': this.options.classes.header
	        });
	      }
	      this.elements.header.html('');
	      if (this.header || this.title) {
	        if (this.header) {
	          this.elements.header.html(this.header);
	        } else {
	          this.elements.header.html('<span class="' + this.options.classes.title + '">' + this.title + '</span>');
	        }
	      }
	      return this.elements.header;
	    };
	
	    Dialog.prototype.renderContent = function() {
	      if (typeof this.elements.content === 'undefined') {
	        this.elements.content = $('<div>', {
	          'class': this.options.classes.content
	        });
	      }
	      this.elements.content.html('');
	      if (this.content !== null) {
	        this.elements.content.html(this.content);
	      }
	      return this.elements.content;
	    };
	
	    Dialog.prototype.renderFooter = function() {
	      var button, _fn, _i, _len, _ref,
	        _this = this;
	      if (typeof this.elements.footer === 'undefined') {
	        this.elements.footer = $('<div>', {
	          'class': this.options.classes.footer
	        });
	      }
	      this.elements.footer.html('');
	      if (typeof this.elements.info !== 'undefined') {
	        delete this.elements.info;
	      }
	      if (typeof this.elements.buttons !== 'undefined') {
	        delete this.elements.buttons;
	      }
	      if (this.footer || this.info || this.buttons.length > 0) {
	        if (this.footer) {
	          this.elements.footer.html(this.footer);
	        } else {
	          if (this.info) {
	            this.elements.info = $('<span class="' + this.options.classes.info + '">' + this.info + '</span>').appendTo(this.elements.footer);
	          }
	          if (this.buttons.length > 0) {
	            this.elements.buttons = $('<div class="' + this.options.classes.buttons + '">');
	            _ref = this.buttons;
	            _fn = function(button) {
	              return $('<a>', {
	                html: button.title,
	                href: '#',
	                'class': _this.options.classes.button,
	                click: function(e) {
	                  e.preventDefault();
	                  return button.action.call(_this);
	                }
	              }).appendTo(_this.elements.buttons);
	            };
	            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	              button = _ref[_i];
	              _fn(button);
	            }
	            this.elements.buttons.appendTo(this.elements.footer);
	          }
	        }
	      }
	      return this.elements.footer;
	    };
	
	    Dialog.prototype.refreshStyles = function(type) {
	      var styles;
	      if (type == null) {
	        type = null;
	      }
	      if (type === null || type === 'header') {
	        if (this.elements.header.html() === '') {
	          this.elements.header.removeAttr('styles');
	        } else if (this.options.styles) {
	          this.elements.header.css({
	            borderBottom: '1px solid black',
	            paddingBottom: '8px'
	          });
	        }
	      }
	      if (type === null || type === 'content') {
	        styles = {
	          maxHeight: this.options.maxHeight,
	          overflow: 'hidden',
	          overflowX: 'auto',
	          overflowY: 'auto'
	        };
	        if (this.elements.content.html() === '') {
	          this.elements.content.removeAttr('styles');
	        } else if (this.options.styles) {
	          styles.borderBottom = '1px solid black';
	          styles.paddingTop = '8px';
	          styles.paddingBottom = '8px';
	        }
	        this.elements.content.css(styles);
	      }
	      if (type === null || type === 'footer') {
	        if (this.elements.footer.html() === '') {
	          return this.elements.footer.removeAttr('styles');
	        } else if (this.options.styles) {
	          this.elements.footer.css({
	            paddingTop: '8px'
	          });
	          if (!this.footer && this.buttons.length > 0) {
	            return this.elements.buttons.css({
	              'float': 'right'
	            });
	          }
	        }
	      }
	    };
	
	    Dialog.prototype.render = function() {
	      var styles;
	      if (this.options === null) {
	        this.options = this.parseOptions();
	      }
	      this.el = $('<div>', {
	        'class': this.options.classes.container,
	        css: {
	          display: 'none',
	          position: 'fixed',
	          left: '50%',
	          top: '50%'
	        }
	      }).appendTo($('body'));
	      styles = {
	        zIndex: this.options.zIndex,
	        width: this.options.width,
	        marginLeft: -(this.options.width / 2),
	        marginTop: -(this.options.maxHeight / 2)
	      };
	      if (this.options.styles) {
	        styles.border = '1px solid black';
	        styles.backgroundColor = 'white';
	        styles.padding = '10px 12px 10px 12px';
	      }
	      this.el.css(styles);
	      this.el.append(this.renderHeader());
	      this.el.append(this.renderContent());
	      this.el.append(this.renderFooter());
	      return this.refreshStyles();
	    };
	
	    Dialog.prototype.moveToCenter = function() {
	      var deferred,
	        _this = this;
	      deferred = Q.defer();
	      this.el.css({
	        display: 'block',
	        visibility: 'hidden'
	      });
	      ready(this.el).then(function() {
	        var height;
	        height = parseInt(_this.el.css('height'));
	        _this.el.css({
	          visibility: 'visible',
	          marginTop: -(height / 2)
	        });
	        return deferred.resolve(_this);
	      });
	      return deferred.promise;
	    };
	
	    Dialog.prototype.show = function(options) {
	      var deferred,
	        _this = this;
	      if (options == null) {
	        options = {};
	      }
	      if (Dialog.visible === null) {
	        this.emit('beforeShow', this);
	        this.options = this.parseOptions(options);
	        if (this.el === null) {
	          this.render();
	        }
	        deferred = Q.defer();
	        this.moveToCenter().then(function() {
	          var done, finish;
	          finish = function() {
	            _this.emit('afterShow', _this);
	            return deferred.resolve(_this);
	          };
	          done = {
	            overlay: false,
	            dialog: false
	          };
	          Overlay.show(_this.options.overlay).then(function() {
	            done.overlay = true;
	            if (done.dialog) {
	              return finish(deferred);
	            }
	          });
	          return _this.el.fadeIn(_this.options.duration, function(e) {
	            Dialog.visible = _this;
	            done.dialog = true;
	            if (done.overlay) {
	              return finish(deferred);
	            }
	          });
	        });
	        return deferred.promise;
	      } else if (Dialog.visible === this) {
	        return Q.reject(new Error('This modal dialog is already open.'));
	      } else {
	        return Q.reject(new Error('Another modal dialog is open.'));
	      }
	    };
	
	    Dialog.prototype.hide = function() {
	      var deferred,
	        _this = this;
	      deferred = Q.defer();
	      if (!this.isOpen()) {
	        deferred.reject(new Error('This window is not open.'));
	      } else {
	        this.emit('beforeHide');
	        Dialog.closing = true;
	        Overlay.hide();
	        this.el.fadeOut(function() {
	          Dialog.visible = null;
	          Dialog.closing = false;
	          _this.emit('afterHide', _this);
	          return deferred.resolve(_this);
	        });
	      }
	      return deferred.promise;
	    };
	
	    Dialog.prototype.changeTitle = function(title) {
	      this.title = title;
	      this.header = null;
	      this.renderHeader();
	      this.refreshStyles('header');
	      return this;
	    };
	
	    Dialog.prototype.changeContent = function(content) {
	      this.content = content;
	      if (this.content === null) {
	        this.elements.content.html('');
	      }
	      this.renderContent();
	      this.refreshStyles('content');
	      return this;
	    };
	
	    Dialog.prototype.changeInfo = function(info) {
	      this.info = info;
	      if (this.info === null && typeof this.elements.info !== 'undefined') {
	        this.elements.info.remove();
	        delete this.elements.info;
	      }
	      this.renderFooter();
	      this.refreshStyles('footer');
	      return this;
	    };
	
	    Dialog.prototype.isOpen = function() {
	      return Dialog.visible === this;
	    };
	
	    return Dialog;
	
	  })(EventEmitter);
	
	  module.exports = Dialog;
	
	}).call(this);
	

}, 'events': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'events');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'events';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'events';
	var __dirname = '.';
	var process = {cwd: function() {return '/';}, argv: ['node', 'events'], env: {}};

	/** code **/
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var domain;
	
	exports.usingDomains = false;
	
	function EventEmitter() {
	  this.domain = null;
	  if (exports.usingDomains) {
	    // if there is an active domain, then attach to it.
	    domain = domain || require('domain');
	    if (domain.active && !(this instanceof domain.Domain)) {
	      this.domain = domain.active;
	    }
	  }
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || defaultMaxListeners;
	}
	exports.EventEmitter = EventEmitter;
	
	// By default EventEmitters will print a warning if more than
	// 10 listeners are added to it. This is a useful default which
	// helps finding memory leaks.
	//
	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	var defaultMaxListeners = 10;
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (typeof n !== 'number' || n < 0)
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	};
	
	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;
	
	  if (!this._events)
	    this._events = {};
	
	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (typeof this._events.error === 'object' &&
	         !this._events.error.length)) {
	      er = arguments[1];
	      if (this.domain) {
	        if (!er) er = new TypeError('Uncaught, unspecified "error" event.');
	        er.domainEmitter = this;
	        er.domain = this.domain;
	        er.domainThrown = false;
	        this.domain.emit('error', er);
	      } else if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        throw TypeError('Uncaught, unspecified "error" event.');
	      }
	      return false;
	    }
	  }
	
	  handler = this._events[type];
	
	  if (typeof handler === 'undefined')
	    return false;
	
	  if (this.domain && this !== process)
	    this.domain.enter();
	
	  if (typeof handler === 'function') {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        len = arguments.length;
	        args = new Array(len - 1);
	        for (i = 1; i < len; i++)
	          args[i - 1] = arguments[i];
	        handler.apply(this, args);
	    }
	  } else if (typeof handler === 'object') {
	    len = arguments.length;
	    args = new Array(len - 1);
	    for (i = 1; i < len; i++)
	      args[i - 1] = arguments[i];
	
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }
	
	  if (this.domain && this !== process)
	    this.domain.exit();
	
	  return true;
	};
	
	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;
	
	  if (typeof listener !== 'function')
	    throw TypeError('listener must be a function');
	
	  if (!this._events)
	    this._events = {};
	
	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type, typeof listener.listener === 'function' ?
	              listener.listener : listener);
	
	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (typeof this._events[type] === 'object')
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];
	
	  // Check for listener leak
	  if (typeof this._events[type] === 'object' && !this._events[type].warned) {
	    m = this._maxListeners;
	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      console.trace();
	    }
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	
	EventEmitter.prototype.once = function(type, listener) {
	  if (typeof listener !== 'function')
	    throw TypeError('listener must be a function');
	
	  function g() {
	    this.removeListener(type, g);
	    listener.apply(this, arguments);
	  }
	
	  g.listener = listener;
	  this.on(type, g);
	
	  return this;
	};
	
	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;
	
	  if (typeof listener !== 'function')
	    throw TypeError('listener must be a function');
	
	  if (!this._events || !this._events[type])
	    return this;
	
	  list = this._events[type];
	  length = list.length;
	  position = -1;
	
	  if (list === listener ||
	      (typeof list.listener === 'function' && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	
	  } else if (typeof list === 'object') {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }
	
	    if (position < 0)
	      return this;
	
	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }
	
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;
	
	  if (!this._events)
	    return this;
	
	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }
	
	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }
	
	  listeners = this._events[type];
	
	  if (typeof listeners === 'function') {
	    this.removeListener(type, listeners);
	  } else {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];
	
	  return this;
	};
	
	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (typeof this._events[type] === 'function')
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};
	
	EventEmitter.listenerCount = function(emitter, type) {
	  var ret;
	  if (!emitter._events || !emitter._events[type])
	    ret = 0;
	  else if (typeof emitter._events[type] === 'function')
	    ret = 1;
	  else
	    ret = emitter._events[type].length;
	  return ret;
	};
	

}, '/test/tests/ConfirmDialog.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/tests/ConfirmDialog.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/tests/ConfirmDialog.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/tests/ConfirmDialog.coffee';
	var __dirname = '/test/tests';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/tests/ConfirmDialog.coffee'], env: {}};

	/** code **/
	(function() {
	  var $, Confirm, Dialog, Overlay, Q, dialog;
	
	  Dialog = require('Dialog');
	
	  Confirm = require('ConfirmDialog');
	
	  Overlay = require('overlay');
	
	  Q = require('q');
	
	  $ = window.jQuery;
	
	  dialog = null;
	
	  describe('ConfirmDialog', function() {
	    beforeEach(function() {
	      return dialog = new Confirm($);
	    });
	    afterEach(function(done) {
	      if (dialog.el) {
	        dialog.el.remove();
	        dialog.el = null;
	      }
	      Dialog.visible = null;
	      Dialog.closing = false;
	      if (Overlay.visible) {
	        return Overlay.hide().then(function() {
	          return done();
	        });
	      } else {
	        return done();
	      }
	    });
	    describe('#constructor()', function() {
	      return it('should create base two buttons', function() {
	        return expect(dialog.buttons.length).to.be.equal(2);
	      });
	    });
	    describe('#on true', function() {
	      return it('should call this method when ok button is clicked', function(done) {
	        dialog.on('true', function() {
	          return done();
	        });
	        dialog.render();
	        return dialog.elements.footer.find('div.buttons a:nth-child(1)').click();
	      });
	    });
	    return describe('#on false', function() {
	      return it('should call this method when cancel button is clicked', function(done) {
	        dialog.on('false', function() {
	          return done();
	        });
	        dialog.render();
	        return dialog.elements.footer.find('div.buttons a:nth-child(2)').click();
	      });
	    });
	  });
	
	}).call(this);
	

}, '/test/tests/Dialog.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/tests/Dialog.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/tests/Dialog.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/tests/Dialog.coffee';
	var __dirname = '/test/tests';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/tests/Dialog.coffee'], env: {}};

	/** code **/
	(function() {
	  var $, Dialog, Overlay, Q, dialog;
	
	  Dialog = require('Dialog');
	
	  Overlay = require('overlay');
	
	  Q = require('q');
	
	  Q.stopUnhandledRejectionTracking();
	
	  $ = window.jQuery;
	
	  dialog = null;
	
	  describe('Dialog', function() {
	    beforeEach(function() {
	      return dialog = new Dialog($);
	    });
	    afterEach(function(done) {
	      if (dialog.el) {
	        dialog.el.remove();
	        dialog.el = null;
	      }
	      Dialog.visible = null;
	      Dialog.closing = false;
	      if (Overlay.visible) {
	        return Overlay.hide().then(function() {
	          return done();
	        });
	      } else {
	        return done();
	      }
	    });
	    describe('#show()', function() {
	      it('should show and create dialog element', function(done) {
	        return dialog.show().then(function() {
	          expect(dialog.el).not.to.be["null"];
	          expect(dialog.el.is(':visible')).to.be["true"];
	          expect(Dialog.visible).to.be.equal(dialog);
	          return done();
	        }).done();
	      });
	      it('should return an error if dialog is already open', function(done) {
	        return dialog.show().then(function() {
	          return dialog.show().fail(function(err) {
	            expect(err).to.be["instanceof"](Error);
	            expect(err.message).to.be.equal('This modal dialog is already open.');
	            return done();
	          });
	        });
	      });
	      it('should return an error if another dialog is open', function(done) {
	        var d;
	        d = new Dialog;
	        return d.show().then(function() {
	          return dialog.show().fail(function(err) {
	            expect(err).to.be["instanceof"](Error);
	            expect(err.message).to.be.equal('Another modal dialog is open.');
	            return d.hide().then(function() {
	              return done();
	            }).done();
	          }).done();
	        }).done();
	      });
	      it('element of new dialog should be empty', function() {
	        dialog.render();
	        expect(dialog.el.find('div').length).to.be.equal(3);
	        expect(dialog.el.find('div.header').html()).to.be.equal('');
	        expect(dialog.el.find('div.content').html()).to.be.equal('');
	        return expect(dialog.el.find('div.footer').html()).to.be.equal('');
	      });
	      it('should set title of dialog', function() {
	        var title;
	        dialog.title = 'some title';
	        dialog.render();
	        title = dialog.elements.header.children('span');
	        expect(title.length).to.be.equal(1);
	        return expect(title.html()).to.be.equal('some title');
	      });
	      it('should set html header', function() {
	        dialog.header = $('<span class="my-header">header</span>');
	        dialog.render();
	        return expect(dialog.elements.header.html()).to.be.equal('<span class="my-header">header</span>');
	      });
	      it('should set some content', function() {
	        dialog.content = 'my content';
	        dialog.render();
	        return expect(dialog.elements.content.html()).to.be.equal('my content');
	      });
	      it('should add some buttons', function() {
	        dialog.addButton('ok');
	        dialog.render();
	        return expect(dialog.elements.footer.find('div.buttons a').html()).to.be.equal('ok');
	      });
	      it('should set simple information text', function() {
	        dialog.info = 'info text';
	        dialog.render();
	        expect(dialog.elements).to.contain.keys(['info']);
	        return expect(dialog.elements.info.html()).to.be.equal('info text');
	      });
	      return it('should set html footer', function() {
	        dialog.footer = $('<div class="my-footer">footer</div>');
	        dialog.render();
	        return expect(dialog.elements.footer.html()).to.be.equal('<div class="my-footer">footer</div>');
	      });
	    });
	    describe('#addButton()', function() {
	      it('should add three buttons', function() {
	        dialog.addButton('ok');
	        dialog.addButton('cancel');
	        return expect(dialog.buttons.length).to.be.equal(2);
	      });
	      it('should call button action after it is clicked', function(done) {
	        dialog.addButton('ok', function() {
	          return done();
	        });
	        dialog.render();
	        return dialog.elements.footer.find('div.buttons a').click();
	      });
	      return it('should call right button action when it is clicked', function(done) {
	        dialog.addButton('cancel');
	        dialog.addButton('ok', function() {
	          return done();
	        });
	        dialog.addButton('close');
	        dialog.render();
	        return dialog.elements.footer.find('div.buttons a:nth-child(2)').click();
	      });
	    });
	    describe('#isOpen()', function() {
	      it('should return false when dialog is closed', function() {
	        return expect(dialog.isOpen()).to.be["false"];
	      });
	      it('should return true when dialog is open', function(done) {
	        return dialog.show().then(function() {
	          expect(dialog.isOpen()).to.be["true"];
	          return done();
	        }).done();
	      });
	      return it('should return false after dialog is again closed', function(done) {
	        return dialog.show().then(function() {
	          return dialog.hide().then(function() {
	            expect(dialog.isOpen()).to.be["false"];
	            return done();
	          }).done();
	        }).done();
	      });
	    });
	    describe('#hide()', function() {
	      it('should hide created dialog', function(done) {
	        return dialog.show().then(function() {
	          return dialog.hide().then(function() {
	            expect(dialog.el.is(':hidden')).to.be["true"];
	            expect(Dialog.visible).to.be["null"];
	            return done();
	          }).done();
	        }).done();
	      });
	      return it('should return an error if dialog is not open', function(done) {
	        return dialog.hide().fail(function(err) {
	          expect(err).to.be["instanceof"](Error);
	          expect(err.message).to.be.equal('This window is not open.');
	          return done();
	        }).done();
	      });
	    });
	    describe('#changeTitle()', function() {
	      return it('should change title of dialog', function() {
	        dialog.title = 'first';
	        dialog.render();
	        expect(dialog.elements.header.children('span').html()).to.be.equal('first');
	        dialog.changeTitle('second');
	        return expect(dialog.elements.header.children('span').html()).to.be.equal('second');
	      });
	    });
	    describe('#changeContent()', function() {
	      it('should change content of dialog', function() {
	        dialog.content = 'first';
	        dialog.render();
	        expect(dialog.elements.content.html()).to.be.equal('first');
	        dialog.changeContent('second');
	        return expect(dialog.elements.content.html()).to.be.equal('second');
	      });
	      return it('should clear content of dialog', function() {
	        dialog.content = 'text';
	        dialog.render();
	        dialog.changeContent(null);
	        return expect(dialog.elements.content.html()).to.be.equal('');
	      });
	    });
	    return describe('#changeInfo()', function() {
	      it('should change info of dialog', function() {
	        dialog.info = 'first';
	        dialog.render();
	        expect(dialog.elements.info.html()).to.be.equal('first');
	        dialog.changeInfo('second');
	        return expect(dialog.elements.info.html()).to.be.equal('second');
	      });
	      return it('should remove old info from dialog', function() {
	        dialog.info = 'first';
	        dialog.render();
	        dialog.changeInfo(null);
	        expect(dialog.elements.footer.html()).to.be.equal('');
	        return expect(dialog.elements).not.to.contain.keys(['info']);
	      });
	    });
	  });
	
	}).call(this);
	

}, '/package.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/package.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/package.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/package.json';
	var __dirname = '/';
	var process = {cwd: function() {return '/';}, argv: ['node', '/package.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
		"name": "modal-dialog",
		"description": "Window modal dialogs for browser",
		"version": "1.6.1",
		"author": {
			"name": "David Kudera",
			"email": "sakren@gmail.com"
		},
		"keywords": [
			"modal",
			"dialog",
			"window",
			"browser",
			"client",
			"widget"
		],
		"repository": {
			"type": "git",
			"url": "git@github.com:sakren/node-modal-dialog.git"
		},
		"license": "MIT",
		"engines": {
			"node": "*"
		},
		"main": "./lib/Dialog.js",
		"dependencies": {
			"q": "~0.9.7",
			"overlay": "~1.2.4",
			"content-ready": "~1.0.0"
		},
		"devDependencies": {
			"mocha": "~1.14.0",
			"chai": "~1.8.1"
		},
		"scripts": {
			"test": "cd ./test; simq build; mocha-phantomjs index.html;"
		}
	}
	}).call(this);
	

}, '/lib/Dialog.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/lib/Dialog.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/lib/Dialog.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/lib/Dialog.js';
	var __dirname = '/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', '/lib/Dialog.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var $, Dialog, EventEmitter, Overlay, Q, ready,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
	
	  Q = require('q');
	
	  Overlay = require('overlay');
	
	  ready = require('content-ready');
	
	  EventEmitter = require('events').EventEmitter;
	
	  $ = null;
	
	  Dialog = (function(_super) {
	    __extends(Dialog, _super);
	
	    Dialog.visible = null;
	
	    Dialog.closing = false;
	
	    Dialog.overlayRegistered = false;
	
	    Dialog.classes = {
	      container: 'modal_dialog',
	      title: 'title',
	      header: 'header',
	      content: 'content',
	      footer: 'footer',
	      info: 'info',
	      buttons: 'buttons',
	      button: 'button'
	    };
	
	    Dialog.styles = true;
	
	    Dialog.prototype.options = null;
	
	    Dialog.prototype.title = null;
	
	    Dialog.prototype.header = null;
	
	    Dialog.prototype.content = null;
	
	    Dialog.prototype.footer = null;
	
	    Dialog.prototype.info = null;
	
	    Dialog.prototype.buttons = null;
	
	    Dialog.prototype.width = 430;
	
	    Dialog.prototype.maxHeight = 400;
	
	    Dialog.prototype.zIndex = 100000;
	
	    Dialog.prototype.duration = 'fast';
	
	    Dialog.prototype.el = null;
	
	    Dialog.prototype.elements = null;
	
	    function Dialog(jquery) {
	      var err,
	        _this = this;
	      if (jquery == null) {
	        jquery = null;
	      }
	      if (jquery === null) {
	        try {
	          jquery = require('jquery');
	        } catch (_error) {
	          err = _error;
	          jquery = window.jQuery;
	        }
	      }
	      if (!jquery) {
	        throw new Error('jquery is not defined.');
	      }
	      $ = jquery;
	      this.buttons = [];
	      this.elements = {};
	      if (Dialog.overlayRegistered === false) {
	        Dialog.overlayRegistered = true;
	        Overlay.on('hide', function() {
	          if (Dialog.visible !== null && Dialog.closing === false) {
	            return Dialog.visible.hide();
	          }
	        });
	      }
	    }
	
	    Dialog.prototype.addButton = function(title, action) {
	      this.buttons.push({
	        title: title,
	        action: action
	      });
	      return this;
	    };
	
	    Dialog.prototype.parseOptions = function(options) {
	      if (options == null) {
	        options = {};
	      }
	      if (typeof options.width === 'undefined') {
	        options.width = this.width;
	      }
	      if (typeof options.maxHeight === 'undefined') {
	        options.maxHeight = this.maxHeight;
	      }
	      if (typeof options.duration === 'undefined') {
	        options.duration = this.duration;
	      }
	      if (typeof options.zIndex === 'undefined') {
	        options.zIndex = this.zIndex;
	      }
	      if (typeof options.styles === 'undefined') {
	        options.styles = Dialog.styles;
	      }
	      if (typeof options.classes === 'undefined') {
	        options.classes = {};
	      }
	      if (typeof options.overlay === 'undefined') {
	        options.overlay = {};
	      }
	      if (typeof options.classes.container === 'undefined') {
	        options.classes.container = Dialog.classes.container;
	      }
	      if (typeof options.classes.title === 'undefined') {
	        options.classes.title = Dialog.classes.title;
	      }
	      if (typeof options.classes.header === 'undefined') {
	        options.classes.header = Dialog.classes.header;
	      }
	      if (typeof options.classes.content === 'undefined') {
	        options.classes.content = Dialog.classes.content;
	      }
	      if (typeof options.classes.footer === 'undefined') {
	        options.classes.footer = Dialog.classes.footer;
	      }
	      if (typeof options.classes.info === 'undefined') {
	        options.classes.info = Dialog.classes.info;
	      }
	      if (typeof options.classes.buttons === 'undefined') {
	        options.classes.buttons = Dialog.classes.buttons;
	      }
	      if (typeof options.classes.button === 'undefined') {
	        options.classes.button = Dialog.classes.button;
	      }
	      options.overlay.duration = options.duration;
	      return options;
	    };
	
	    Dialog.prototype.renderHeader = function() {
	      if (typeof this.elements.header === 'undefined') {
	        this.elements.header = $('<div>', {
	          'class': this.options.classes.header
	        });
	      }
	      this.elements.header.html('');
	      if (this.header || this.title) {
	        if (this.header) {
	          this.elements.header.html(this.header);
	        } else {
	          this.elements.header.html('<span class="' + this.options.classes.title + '">' + this.title + '</span>');
	        }
	      }
	      return this.elements.header;
	    };
	
	    Dialog.prototype.renderContent = function() {
	      if (typeof this.elements.content === 'undefined') {
	        this.elements.content = $('<div>', {
	          'class': this.options.classes.content
	        });
	      }
	      this.elements.content.html('');
	      if (this.content !== null) {
	        this.elements.content.html(this.content);
	      }
	      return this.elements.content;
	    };
	
	    Dialog.prototype.renderFooter = function() {
	      var button, _fn, _i, _len, _ref,
	        _this = this;
	      if (typeof this.elements.footer === 'undefined') {
	        this.elements.footer = $('<div>', {
	          'class': this.options.classes.footer
	        });
	      }
	      this.elements.footer.html('');
	      if (typeof this.elements.info !== 'undefined') {
	        delete this.elements.info;
	      }
	      if (typeof this.elements.buttons !== 'undefined') {
	        delete this.elements.buttons;
	      }
	      if (this.footer || this.info || this.buttons.length > 0) {
	        if (this.footer) {
	          this.elements.footer.html(this.footer);
	        } else {
	          if (this.info) {
	            this.elements.info = $('<span class="' + this.options.classes.info + '">' + this.info + '</span>').appendTo(this.elements.footer);
	          }
	          if (this.buttons.length > 0) {
	            this.elements.buttons = $('<div class="' + this.options.classes.buttons + '">');
	            _ref = this.buttons;
	            _fn = function(button) {
	              return $('<a>', {
	                html: button.title,
	                href: '#',
	                'class': _this.options.classes.button,
	                click: function(e) {
	                  e.preventDefault();
	                  return button.action.call(_this);
	                }
	              }).appendTo(_this.elements.buttons);
	            };
	            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	              button = _ref[_i];
	              _fn(button);
	            }
	            this.elements.buttons.appendTo(this.elements.footer);
	          }
	        }
	      }
	      return this.elements.footer;
	    };
	
	    Dialog.prototype.refreshStyles = function(type) {
	      var styles;
	      if (type == null) {
	        type = null;
	      }
	      if (type === null || type === 'header') {
	        if (this.elements.header.html() === '') {
	          this.elements.header.removeAttr('styles');
	        } else if (this.options.styles) {
	          this.elements.header.css({
	            borderBottom: '1px solid black',
	            paddingBottom: '8px'
	          });
	        }
	      }
	      if (type === null || type === 'content') {
	        styles = {
	          maxHeight: this.options.maxHeight,
	          overflow: 'hidden',
	          overflowX: 'auto',
	          overflowY: 'auto'
	        };
	        if (this.elements.content.html() === '') {
	          this.elements.content.removeAttr('styles');
	        } else if (this.options.styles) {
	          styles.borderBottom = '1px solid black';
	          styles.paddingTop = '8px';
	          styles.paddingBottom = '8px';
	        }
	        this.elements.content.css(styles);
	      }
	      if (type === null || type === 'footer') {
	        if (this.elements.footer.html() === '') {
	          return this.elements.footer.removeAttr('styles');
	        } else if (this.options.styles) {
	          this.elements.footer.css({
	            paddingTop: '8px'
	          });
	          if (!this.footer && this.buttons.length > 0) {
	            return this.elements.buttons.css({
	              'float': 'right'
	            });
	          }
	        }
	      }
	    };
	
	    Dialog.prototype.render = function() {
	      var styles;
	      if (this.options === null) {
	        this.options = this.parseOptions();
	      }
	      this.el = $('<div>', {
	        'class': this.options.classes.container,
	        css: {
	          display: 'none',
	          position: 'fixed',
	          left: '50%',
	          top: '50%'
	        }
	      }).appendTo($('body'));
	      styles = {
	        zIndex: this.options.zIndex,
	        width: this.options.width,
	        marginLeft: -(this.options.width / 2),
	        marginTop: -(this.options.maxHeight / 2)
	      };
	      if (this.options.styles) {
	        styles.border = '1px solid black';
	        styles.backgroundColor = 'white';
	        styles.padding = '10px 12px 10px 12px';
	      }
	      this.el.css(styles);
	      this.el.append(this.renderHeader());
	      this.el.append(this.renderContent());
	      this.el.append(this.renderFooter());
	      return this.refreshStyles();
	    };
	
	    Dialog.prototype.moveToCenter = function() {
	      var deferred,
	        _this = this;
	      deferred = Q.defer();
	      this.el.css({
	        display: 'block',
	        visibility: 'hidden'
	      });
	      ready(this.el).then(function() {
	        var height;
	        height = parseInt(_this.el.css('height'));
	        _this.el.css({
	          visibility: 'visible',
	          marginTop: -(height / 2)
	        });
	        return deferred.resolve(_this);
	      });
	      return deferred.promise;
	    };
	
	    Dialog.prototype.show = function(options) {
	      var deferred,
	        _this = this;
	      if (options == null) {
	        options = {};
	      }
	      if (Dialog.visible === null) {
	        this.emit('beforeShow', this);
	        this.options = this.parseOptions(options);
	        if (this.el === null) {
	          this.render();
	        }
	        deferred = Q.defer();
	        this.moveToCenter().then(function() {
	          var done, finish;
	          finish = function() {
	            _this.emit('afterShow', _this);
	            return deferred.resolve(_this);
	          };
	          done = {
	            overlay: false,
	            dialog: false
	          };
	          Overlay.show(_this.options.overlay).then(function() {
	            done.overlay = true;
	            if (done.dialog) {
	              return finish(deferred);
	            }
	          });
	          return _this.el.fadeIn(_this.options.duration, function(e) {
	            Dialog.visible = _this;
	            done.dialog = true;
	            if (done.overlay) {
	              return finish(deferred);
	            }
	          });
	        });
	        return deferred.promise;
	      } else if (Dialog.visible === this) {
	        return Q.reject(new Error('This modal dialog is already open.'));
	      } else {
	        return Q.reject(new Error('Another modal dialog is open.'));
	      }
	    };
	
	    Dialog.prototype.hide = function() {
	      var deferred,
	        _this = this;
	      deferred = Q.defer();
	      if (!this.isOpen()) {
	        deferred.reject(new Error('This window is not open.'));
	      } else {
	        this.emit('beforeHide');
	        Dialog.closing = true;
	        Overlay.hide();
	        this.el.fadeOut(function() {
	          Dialog.visible = null;
	          Dialog.closing = false;
	          _this.emit('afterHide', _this);
	          return deferred.resolve(_this);
	        });
	      }
	      return deferred.promise;
	    };
	
	    Dialog.prototype.changeTitle = function(title) {
	      this.title = title;
	      this.header = null;
	      this.renderHeader();
	      this.refreshStyles('header');
	      return this;
	    };
	
	    Dialog.prototype.changeContent = function(content) {
	      this.content = content;
	      if (this.content === null) {
	        this.elements.content.html('');
	      }
	      this.renderContent();
	      this.refreshStyles('content');
	      return this;
	    };
	
	    Dialog.prototype.changeInfo = function(info) {
	      this.info = info;
	      if (this.info === null && typeof this.elements.info !== 'undefined') {
	        this.elements.info.remove();
	        delete this.elements.info;
	      }
	      this.renderFooter();
	      this.refreshStyles('footer');
	      return this;
	    };
	
	    Dialog.prototype.isOpen = function() {
	      return Dialog.visible === this;
	    };
	
	    return Dialog;
	
	  })(EventEmitter);
	
	  module.exports = Dialog;
	
	}).call(this);
	

}, 'q/package.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'q/package.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'q/package.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'q/package.json';
	var __dirname = 'q';
	var process = {cwd: function() {return '/';}, argv: ['node', 'q/package.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
	  "name": "q",
	  "version": "0.9.7",
	  "description": "A library for promises (CommonJS/Promises/A,B,D)",
	  "homepage": "https://github.com/kriskowal/q",
	  "author": {
	    "name": "Kris Kowal",
	    "email": "kris@cixar.com",
	    "url": "https://github.com/kriskowal"
	  },
	  "keywords": [
	    "q",
	    "promise",
	    "promises",
	    "promises-a",
	    "promises-aplus",
	    "deferred",
	    "future",
	    "async",
	    "flow control",
	    "fluent",
	    "browser",
	    "node"
	  ],
	  "contributors": [
	    {
	      "name": "Kris Kowal",
	      "email": "kris@cixar.com",
	      "url": "https://github.com/kriskowal"
	    },
	    {
	      "name": "Irakli Gozalishvili",
	      "email": "rfobic@gmail.com",
	      "url": "http://jeditoolkit.com"
	    },
	    {
	      "name": "Domenic Denicola",
	      "email": "domenic@domenicdenicola.com",
	      "url": "http://domenicdenicola.com"
	    }
	  ],
	  "bugs": {
	    "url": "http://github.com/kriskowal/q/issues"
	  },
	  "license": {
	    "type": "MIT",
	    "url": "http://github.com/kriskowal/q/raw/master/LICENSE"
	  },
	  "main": "q.js",
	  "repository": {
	    "type": "git",
	    "url": "git://github.com/kriskowal/q.git"
	  },
	  "engines": {
	    "node": ">=0.6.0",
	    "teleport": ">=0.2.0"
	  },
	  "dependencies": {},
	  "devDependencies": {
	    "jshint": "~2.1.9",
	    "cover": "*",
	    "jasmine-node": "1.11.0",
	    "opener": "*",
	    "promises-aplus-tests": "1.x",
	    "grunt": "~0.4.1",
	    "grunt-cli": "~0.1.9",
	    "grunt-contrib-uglify": "~0.2.2",
	    "matcha": "~0.2.0"
	  },
	  "scripts": {
	    "test": "jasmine-node spec && promises-aplus-tests spec/aplus-adapter",
	    "test-browser": "opener spec/q-spec.html",
	    "benchmark": "matcha",
	    "lint": "jshint q.js",
	    "cover": "cover run node_modules/jasmine-node/bin/jasmine-node spec && cover report html && opener cover_html/index.html",
	    "minify": "grunt",
	    "prepublish": "grunt"
	  },
	  "overlay": {
	    "teleport": {
	      "dependencies": {
	        "system": ">=0.0.4"
	      }
	    }
	  },
	  "directories": {
	    "test": "./spec"
	  },
	  "readme": "[![Build Status](https://secure.travis-ci.org/kriskowal/q.png?branch=master)](http://travis-ci.org/kriskowal/q)\n\n<a href=\"http://promises-aplus.github.com/promises-spec\">\n    <img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\"\n         align=\"right\" alt=\"Promises/A+ logo\" />\n</a>\n\nIf a function cannot return a value or throw an exception without\nblocking, it can return a promise instead.  A promise is an object\nthat represents the return value or the thrown exception that the\nfunction may eventually provide.  A promise can also be used as a\nproxy for a [remote object][Q-Connection] to overcome latency.\n\n[Q-Connection]: https://github.com/kriskowal/q-connection\n\nOn the first pass, promises can mitigate the “[Pyramid of\nDoom][POD]”: the situation where code marches to the right faster\nthan it marches forward.\n\n[POD]: http://calculist.org/blog/2011/12/14/why-coroutines-wont-work-on-the-web/\n\n```javascript\nstep1(function (value1) {\n    step2(value1, function(value2) {\n        step3(value2, function(value3) {\n            step4(value3, function(value4) {\n                // Do something with value4\n            });\n        });\n    });\n});\n```\n\nWith a promise library, you can flatten the pyramid.\n\n```javascript\nQ.fcall(promisedStep1)\n.then(promisedStep2)\n.then(promisedStep3)\n.then(promisedStep4)\n.then(function (value4) {\n    // Do something with value4\n})\n.catch(function (error) {\n    // Handle any error from all above steps\n})\n.done();\n```\n\nWith this approach, you also get implicit error propagation, just like `try`,\n`catch`, and `finally`.  An error in `promisedStep1` will flow all the way to\nthe `catch` function, where it’s caught and handled.  (Here `promisedStepN` is\na version of `stepN` that returns a promise.)\n\nThe callback approach is called an “inversion of control”.\nA function that accepts a callback instead of a return value\nis saying, “Don’t call me, I’ll call you.”.  Promises\n[un-invert][IOC] the inversion, cleanly separating the input\narguments from control flow arguments.  This simplifies the\nuse and creation of API’s, particularly variadic,\nrest and spread arguments.\n\n[IOC]: http://www.slideshare.net/domenicdenicola/callbacks-promises-and-coroutines-oh-my-the-evolution-of-asynchronicity-in-javascript\n\n\n## Getting Started\n\nThe Q module can be loaded as:\n\n-   A ``<script>`` tag (creating a ``Q`` global variable): ~2.5 KB minified and\n    gzipped.\n-   A Node.js and CommonJS module, available in [npm](https://npmjs.org/) as\n    the [q](https://npmjs.org/package/q) package\n-   An AMD module\n-   A [component](https://github.com/component/component) as ``microjs/q``\n-   Using [bower](http://bower.io/) as ``q``\n-   Using [NuGet](http://nuget.org/) as [Q](https://nuget.org/packages/q)\n\nQ can exchange promises with jQuery, Dojo, When.js, WinJS, and more.\n\n## Resources\n\nOur [wiki][] contains a number of useful resources, including:\n\n- A method-by-method [Q API reference][reference].\n- A growing [examples gallery][examples], showing how Q can be used to make\n  everything better. From XHR to database access to accessing the Flickr API,\n  Q is there for you.\n- There are many libraries that produce and consume Q promises for everything\n  from file system/database access or RPC to templating. For a list of some of\n  the more popular ones, see [Libraries][].\n- If you want materials that introduce the promise concept generally, and the\n  below tutorial isn't doing it for you, check out our collection of\n  [presentations, blog posts, and podcasts][resources].\n- A guide for those [coming from jQuery's `$.Deferred`][jquery].\n\nWe'd also love to have you join the Q-Continuum [mailing list][].\n\n[wiki]: https://github.com/kriskowal/q/wiki\n[reference]: https://github.com/kriskowal/q/wiki/API-Reference\n[examples]: https://github.com/kriskowal/q/wiki/Examples-Gallery\n[Libraries]: https://github.com/kriskowal/q/wiki/Libraries\n[resources]: https://github.com/kriskowal/q/wiki/General-Promise-Resources\n[jquery]: https://github.com/kriskowal/q/wiki/Coming-from-jQuery\n[mailing list]: https://groups.google.com/forum/#!forum/q-continuum\n\n\n## Tutorial\n\nPromises have a ``then`` method, which you can use to get the eventual\nreturn value (fulfillment) or thrown exception (rejection).\n\n```javascript\npromiseMeSomething()\n.then(function (value) {\n}, function (reason) {\n});\n```\n\nIf ``promiseMeSomething`` returns a promise that gets fulfilled later\nwith a return value, the first function (the fulfillment handler) will be\ncalled with the value.  However, if the ``promiseMeSomething`` function\ngets rejected later by a thrown exception, the second function (the\nrejection handler) will be called with the exception.\n\nNote that resolution of a promise is always asynchronous: that is, the\nfulfillment or rejection handler will always be called in the next turn of the\nevent loop (i.e. `process.nextTick` in Node). This gives you a nice\nguarantee when mentally tracing the flow of your code, namely that\n``then`` will always return before either handler is executed.\n\nIn this tutorial, we begin with how to consume and work with promises. We'll\ntalk about how to create them, and thus create functions like\n`promiseMeSomething` that return promises, [below](#the-beginning).\n\n\n### Propagation\n\nThe ``then`` method returns a promise, which in this example, I’m\nassigning to ``outputPromise``.\n\n```javascript\nvar outputPromise = getInputPromise()\n.then(function (input) {\n}, function (reason) {\n});\n```\n\nThe ``outputPromise`` variable becomes a new promise for the return\nvalue of either handler.  Since a function can only either return a\nvalue or throw an exception, only one handler will ever be called and it\nwill be responsible for resolving ``outputPromise``.\n\n-   If you return a value in a handler, ``outputPromise`` will get\n    fulfilled.\n\n-   If you throw an exception in a handler, ``outputPromise`` will get\n    rejected.\n\n-   If you return a **promise** in a handler, ``outputPromise`` will\n    “become” that promise.  Being able to become a new promise is useful\n    for managing delays, combining results, or recovering from errors.\n\nIf the ``getInputPromise()`` promise gets rejected and you omit the\nrejection handler, the **error** will go to ``outputPromise``:\n\n```javascript\nvar outputPromise = getInputPromise()\n.then(function (value) {\n});\n```\n\nIf the input promise gets fulfilled and you omit the fulfillment handler, the\n**value** will go to ``outputPromise``:\n\n```javascript\nvar outputPromise = getInputPromise()\n.then(null, function (error) {\n});\n```\n\nQ promises provide a ``fail`` shorthand for ``then`` when you are only\ninterested in handling the error:\n\n```javascript\nvar outputPromise = getInputPromise()\n.fail(function (error) {\n});\n```\n\nIf you are writing JavaScript for modern engines only or using\nCoffeeScript, you may use `catch` instead of `fail`.\n\nPromises also have a ``fin`` function that is like a ``finally`` clause.\nThe final handler gets called, with no arguments, when the promise\nreturned by ``getInputPromise()`` either returns a value or throws an\nerror.  The value returned or error thrown by ``getInputPromise()``\npasses directly to ``outputPromise`` unless the final handler fails, and\nmay be delayed if the final handler returns a promise.\n\n```javascript\nvar outputPromise = getInputPromise()\n.fin(function () {\n    // close files, database connections, stop servers, conclude tests\n});\n```\n\n-   If the handler returns a value, the value is ignored\n-   If the handler throws an error, the error passes to ``outputPromise``\n-   If the handler returns a promise, ``outputPromise`` gets postponed.  The\n    eventual value or error has the same effect as an immediate return\n    value or thrown error: a value would be ignored, an error would be\n    forwarded.\n\nIf you are writing JavaScript for modern engines only or using\nCoffeeScript, you may use `finally` instead of `fin`.\n\n### Chaining\n\nThere are two ways to chain promises.  You can chain promises either\ninside or outside handlers.  The next two examples are equivalent.\n\n```javascript\nreturn getUsername()\n.then(function (username) {\n    return getUser(username)\n    .then(function (user) {\n        // if we get here without an error,\n        // the value returned here\n        // or the exception thrown here\n        // resolves the promise returned\n        // by the first line\n    })\n});\n```\n\n```javascript\nreturn getUsername()\n.then(function (username) {\n    return getUser(username);\n})\n.then(function (user) {\n    // if we get here without an error,\n    // the value returned here\n    // or the exception thrown here\n    // resolves the promise returned\n    // by the first line\n});\n```\n\nThe only difference is nesting.  It’s useful to nest handlers if you\nneed to capture multiple input values in your closure.\n\n```javascript\nfunction authenticate() {\n    return getUsername()\n    .then(function (username) {\n        return getUser(username);\n    })\n    // chained because we will not need the user name in the next event\n    .then(function (user) {\n        return getPassword()\n        // nested because we need both user and password next\n        .then(function (password) {\n            if (user.passwordHash !== hash(password)) {\n                throw new Error(\"Can't authenticate\");\n            }\n        });\n    });\n}\n```\n\n\n### Combination\n\nYou can turn an array of promises into a promise for the whole,\nfulfilled array using ``all``.\n\n```javascript\nreturn Q.all([\n    eventualAdd(2, 2),\n    eventualAdd(10, 20)\n]);\n```\n\nIf you have a promise for an array, you can use ``spread`` as a\nreplacement for ``then``.  The ``spread`` function “spreads” the\nvalues over the arguments of the fulfillment handler.  The rejection handler\nwill get called at the first sign of failure.  That is, whichever of\nthe recived promises fails first gets handled by the rejection handler.\n\n```javascript\nfunction eventualAdd(a, b) {\n    return Q.spread([a, b], function (a, b) {\n        return a + b;\n    })\n}\n```\n\nBut ``spread`` calls ``all`` initially, so you can skip it in chains.\n\n```javascript\nreturn getUsername()\n.then(function (username) {\n    return [username, getUser(username)];\n})\n.spread(function (username, user) {\n});\n```\n\nThe ``all`` function returns a promise for an array of values.  When this\npromise is fulfilled, the array contains the fulfillment values of the original\npromises, in the same order as those promises.  If one of the given promises\nis rejected, the returned promise is immediately rejected, not waiting for the\nrest of the batch.  If you want to wait for all of the promises to either be\nfulfilled or rejected, you can use ``allSettled``.\n\n```javascript\nQ.allSettled(promises)\n.then(function (results) {\n    results.forEach(function (result) {\n        if (result.state === \"fulfilled\") {\n            var value = result.value;\n        } else {\n            var reason = result.reason;\n        }\n    });\n});\n```\n\n\n### Sequences\n\nIf you have a number of promise-producing functions that need\nto be run sequentially, you can of course do so manually:\n\n```javascript\nreturn foo(initialVal).then(bar).then(baz).then(qux);\n```\n\nHowever, if you want to run a dynamically constructed sequence of\nfunctions, you'll want something like this:\n\n```javascript\nvar funcs = [foo, bar, baz, qux];\n\nvar result = Q(initialVal);\nfuncs.forEach(function (f) {\n    result = result.then(f);\n});\nreturn result;\n```\n\nYou can make this slightly more compact using `reduce`:\n\n```javascript\nreturn funcs.reduce(function (soFar, f) {\n    return soFar.then(f);\n}, Q(initialVal));\n```\n\nOr, you could use th ultra-compact version:\n\n```javascript\nreturn funcs.reduce(Q.when, Q());\n```\n\n### Handling Errors\n\nOne sometimes-unintuive aspect of promises is that if you throw an\nexception in the fulfillment handler, it will not be be caught by the error\nhandler.\n\n```javascript\nreturn foo()\n.then(function (value) {\n    throw new Error(\"Can't bar.\");\n}, function (error) {\n    // We only get here if \"foo\" fails\n});\n```\n\nTo see why this is, consider the parallel between promises and\n``try``/``catch``. We are ``try``-ing to execute ``foo()``: the error\nhandler represents a ``catch`` for ``foo()``, while the fulfillment handler\nrepresents code that happens *after* the ``try``/``catch`` block.\nThat code then needs its own ``try``/``catch`` block.\n\nIn terms of promises, this means chaining your rejection handler:\n\n```javascript\nreturn foo()\n.then(function (value) {\n    throw new Error(\"Can't bar.\");\n})\n.fail(function (error) {\n    // We get here with either foo's error or bar's error\n});\n```\n\n### Progress Notification\n\nIt's possible for promises to report their progress, e.g. for tasks that take a\nlong time like a file upload. Not all promises will implement progress\nnotifications, but for those that do, you can consume the progress values using\na third parameter to ``then``:\n\n```javascript\nreturn uploadFile()\n.then(function () {\n    // Success uploading the file\n}, function (err) {\n    // There was an error, and we get the reason for error\n}, function (progress) {\n    // We get notified of the upload's progress as it is executed\n});\n```\n\nLike `fail`, Q also provides a shorthand for progress callbacks\ncalled `progress`:\n\n```javascript\nreturn uploadFile().progress(function (progress) {\n    // We get notified of the upload's progress\n});\n```\n\n### The End\n\nWhen you get to the end of a chain of promises, you should either\nreturn the last promise or end the chain.  Since handlers catch\nerrors, it’s an unfortunate pattern that the exceptions can go\nunobserved.\n\nSo, either return it,\n\n```javascript\nreturn foo()\n.then(function () {\n    return \"bar\";\n});\n```\n\nOr, end it.\n\n```javascript\nfoo()\n.then(function () {\n    return \"bar\";\n})\n.done();\n```\n\nEnding a promise chain makes sure that, if an error doesn’t get\nhandled before the end, it will get rethrown and reported.\n\nThis is a stopgap. We are exploring ways to make unhandled errors\nvisible without any explicit handling.\n\n\n### The Beginning\n\nEverything above assumes you get a promise from somewhere else.  This\nis the common case.  Every once in a while, you will need to create a\npromise from scratch.\n\n#### Using ``Q.fcall``\n\nYou can create a promise from a value using ``Q.fcall``.  This returns a\npromise for 10.\n\n```javascript\nreturn Q.fcall(function () {\n    return 10;\n});\n```\n\nYou can also use ``fcall`` to get a promise for an exception.\n\n```javascript\nreturn Q.fcall(function () {\n    throw new Error(\"Can't do it\");\n});\n```\n\nAs the name implies, ``fcall`` can call functions, or even promised\nfunctions.  This uses the ``eventualAdd`` function above to add two\nnumbers.\n\n```javascript\nreturn Q.fcall(eventualAdd, 2, 2);\n```\n\n\n#### Using Deferreds\n\nIf you have to interface with asynchronous functions that are callback-based\ninstead of promise-based, Q provides a few shortcuts (like ``Q.nfcall`` and\nfriends). But much of the time, the solution will be to use *deferreds*.\n\n```javascript\nvar deferred = Q.defer();\nFS.readFile(\"foo.txt\", \"utf-8\", function (error, text) {\n    if (error) {\n        deferred.reject(new Error(error));\n    } else {\n        deferred.resolve(text);\n    }\n});\nreturn deferred.promise;\n```\n\nNote that a deferred can be resolved with a value or a promise.  The\n``reject`` function is a shorthand for resolving with a rejected\npromise.\n\n```javascript\n// this:\ndeferred.reject(new Error(\"Can't do it\"));\n\n// is shorthand for:\nvar rejection = Q.fcall(function () {\n    throw new Error(\"Can't do it\");\n});\ndeferred.resolve(rejection);\n```\n\nThis is a simplified implementation of ``Q.delay``.\n\n```javascript\nfunction delay(ms) {\n    var deferred = Q.defer();\n    setTimeout(deferred.resolve, ms);\n    return deferred.promise;\n}\n```\n\nThis is a simplified implementation of ``Q.timeout``\n\n```javascript\nfunction timeout(promise, ms) {\n    var deferred = Q.defer();\n    Q.when(promise, deferred.resolve);\n    delay(ms).then(function () {\n        deferred.reject(new Error(\"Timed out\"));\n    });\n    return deferred.promise;\n}\n```\n\nFinally, you can send a progress notification to the promise with\n``deferred.notify``.\n\nFor illustration, this is a wrapper for XML HTTP requests in the browser. Note\nthat a more [thorough][XHR] implementation would be in order in practice.\n\n[XHR]: https://github.com/montagejs/mr/blob/71e8df99bb4f0584985accd6f2801ef3015b9763/browser.js#L29-L73\n\n```javascript\nfunction requestOkText(url) {\n    var request = new XMLHttpRequest();\n    var deferred = Q.defer();\n\n    request.open(\"GET\", url, true);\n    request.onload = onload;\n    request.onerror = onerror;\n    request.onprogress = onprogress;\n    request.send();\n\n    function onload() {\n        if (request.status === 200) {\n            deferred.resolve(request.responseText);\n        } else {\n            deferred.reject(new Error(\"Status code was \" + request.status));\n        }\n    }\n\n    function onerror() {\n        deferred.reject(new Error(\"Can't XHR \" + JSON.stringify(url)));\n    }\n\n    function onprogress(event) {\n        deferred.notify(event.loaded / event.total);\n    }\n\n    return deferred.promise;\n}\n```\n\nBelow is an example of how to use this ``requestOkText`` function:\n\n```javascript\nrequestOkText(\"http://localhost:3000\")\n.then(function (responseText) {\n    // If the HTTP response returns 200 OK, log the response text.\n    console.log(responseText);\n}, function (error) {\n    // If there's an error or a non-200 status code, log the error.\n    console.error(error);\n}, function (progress) {\n    // Log the progress as it comes in.\n    console.log(\"Request progress: \" + Math.round(progress * 100) + \"%\");\n});\n```\n\n### The Middle\n\nIf you are using a function that may return a promise, but just might\nreturn a value if it doesn’t need to defer, you can use the “static”\nmethods of the Q library.\n\nThe ``when`` function is the static equivalent for ``then``.\n\n```javascript\nreturn Q.when(valueOrPromise, function (value) {\n}, function (error) {\n});\n```\n\nAll of the other methods on a promise have static analogs with the\nsame name.\n\nThe following are equivalent:\n\n```javascript\nreturn Q.all([a, b]);\n```\n\n```javascript\nreturn Q.fcall(function () {\n    return [a, b];\n})\n.all();\n```\n\nWhen working with promises provided by other libraries, you should\nconvert it to a Q promise.  Not all promise libraries make the same\nguarantees as Q and certainly don’t provide all of the same methods.\nMost libraries only provide a partially functional ``then`` method.\nThis thankfully is all we need to turn them into vibrant Q promises.\n\n```javascript\nreturn Q($.ajax(...))\n.then(function () {\n});\n```\n\nIf there is any chance that the promise you receive is not a Q promise\nas provided by your library, you should wrap it using a Q function.\nYou can even use ``Q.invoke`` as a shorthand.\n\n```javascript\nreturn Q.invoke($, 'ajax', ...)\n.then(function () {\n});\n```\n\n\n### Over the Wire\n\nA promise can serve as a proxy for another object, even a remote\nobject.  There are methods that allow you to optimistically manipulate\nproperties or call functions.  All of these interactions return\npromises, so they can be chained.\n\n```\ndirect manipulation         using a promise as a proxy\n--------------------------  -------------------------------\nvalue.foo                   promise.get(\"foo\")\nvalue.foo = value           promise.put(\"foo\", value)\ndelete value.foo            promise.del(\"foo\")\nvalue.foo(...args)          promise.post(\"foo\", [args])\nvalue.foo(...args)          promise.invoke(\"foo\", ...args)\nvalue(...args)              promise.fapply([args])\nvalue(...args)              promise.fcall(...args)\n```\n\nIf the promise is a proxy for a remote object, you can shave\nround-trips by using these functions instead of ``then``.  To take\nadvantage of promises for remote objects, check out [Q-Connection][].\n\n[Q-Connection]: https://github.com/kriskowal/q-connection\n\nEven in the case of non-remote objects, these methods can be used as\nshorthand for particularly-simple fulfillment handlers. For example, you\ncan replace\n\n```javascript\nreturn Q.fcall(function () {\n    return [{ foo: \"bar\" }, { foo: \"baz\" }];\n})\n.then(function (value) {\n    return value[0].foo;\n});\n```\n\nwith\n\n```javascript\nreturn Q.fcall(function () {\n    return [{ foo: \"bar\" }, { foo: \"baz\" }];\n})\n.get(0)\n.get(\"foo\");\n```\n\n\n### Adapting Node\n\nIf you're working with functions that make use of the Node.js callback pattern,\nwhere callbacks are in the form of `function(err, result)`, Q provides a few\nuseful utility functions for converting between them. The most straightforward\nare probably `Q.nfcall` and `Q.nfapply` (\"Node function call/apply\") for calling\nNode.js-style functions and getting back a promise:\n\n```javascript\nreturn Q.nfcall(FS.readFile, \"foo.txt\", \"utf-8\");\nreturn Q.nfapply(FS.readFile, [\"foo.txt\", \"utf-8\"]);\n```\n\nIf you are working with methods, instead of simple functions, you can easily\nrun in to the usual problems where passing a method to another function—like\n`Q.nfcall`—\"un-binds\" the method from its owner. To avoid this, you can either\nuse `Function.prototype.bind` or some nice shortcut methods we provide:\n\n```javascript\nreturn Q.ninvoke(redisClient, \"get\", \"user:1:id\");\nreturn Q.npost(redisClient, \"get\", [\"user:1:id\"]);\n```\n\nYou can also create reusable wrappers with `Q.denodeify` or `Q.nbind`:\n\n```javascript\nvar readFile = Q.denodeify(FS.readFile);\nreturn readFile(\"foo.txt\", \"utf-8\");\n\nvar redisClientGet = Q.nbind(redisClient.get, redisClient);\nreturn redisClientGet(\"user:1:id\");\n```\n\nFinally, if you're working with raw deferred objects, there is a\n`makeNodeResolver` method on deferreds that can be handy:\n\n```javascript\nvar deferred = Q.defer();\nFS.readFile(\"foo.txt\", \"utf-8\", deferred.makeNodeResolver());\nreturn deferred.promise;\n```\n\n### Long Stack Traces\n\nQ comes with optional support for “long stack traces,” wherein the `stack`\nproperty of `Error` rejection reasons is rewritten to be traced along\nasynchronous jumps instead of stopping at the most recent one. As an example:\n\n```js\nfunction theDepthsOfMyProgram() {\n  Q.delay(100).done(function explode() {\n    throw new Error(\"boo!\");\n  });\n}\n\ntheDepthsOfMyProgram();\n```\n\nusually would give a rather unhelpful stack trace looking something like\n\n```\nError: boo!\n    at explode (/path/to/test.js:3:11)\n    at _fulfilled (/path/to/test.js:q:54)\n    at resolvedValue.promiseDispatch.done (/path/to/q.js:823:30)\n    at makePromise.promise.promiseDispatch (/path/to/q.js:496:13)\n    at pending (/path/to/q.js:397:39)\n    at process.startup.processNextTick.process._tickCallback (node.js:244:9)\n```\n\nBut, if you turn this feature on by setting\n\n```js\nQ.longStackSupport = true;\n```\n\nthen the above code gives a nice stack trace to the tune of\n\n```\nError: boo!\n    at explode (/path/to/test.js:3:11)\nFrom previous event:\n    at theDepthsOfMyProgram (/path/to/test.js:2:16)\n    at Object.<anonymous> (/path/to/test.js:7:1)\n```\n\nNote how you can see the the function that triggered the async operation in the\nstack trace! This is very helpful for debugging, as otherwise you end up getting\nonly the first line, plus a bunch of Q internals, with no sign of where the\noperation started.\n\nThis feature does come with somewhat-serious performance and memory overhead,\nhowever. If you're working with lots of promises, or trying to scale a server\nto many users, you should probably keep it off. But in development, go for it!\n\n## Tests\n\nYou can view the results of the Q test suite [in your browser][tests]!\n\n[tests]: https://rawgithub.com/kriskowal/q/master/spec/q-spec.html\n\n## License\n\nCopyright 2009–2013 Kristopher Michael Kowal\nMIT License (enclosed)\n\n",
	  "readmeFilename": "README.md",
	  "_id": "q@0.9.7",
	  "_from": "q@~0.9.7"
	}
	
	}).call(this);
	

}, 'overlay/package.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'overlay/package.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'overlay/package.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'overlay/package.json';
	var __dirname = 'overlay';
	var process = {cwd: function() {return '/';}, argv: ['node', 'overlay/package.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
	  "name": "overlay",
	  "description": "Really stupidly simple overlay for browser.",
	  "version": "1.2.4",
	  "author": {
	    "name": "David Kudera",
	    "email": "sakren@gmail.com"
	  },
	  "keywords": [
	    "browser",
	    "overlay",
	    "modal"
	  ],
	  "repository": {
	    "type": "git",
	    "url": "git@github.com:sakren/node-overlay.git"
	  },
	  "main": "./lib/Overlay.js",
	  "license": "MIT",
	  "dependencies": {
	    "q": "0.9.6"
	  },
	  "devDependencies": {
	    "mocha": "latest",
	    "chai": "latest"
	  },
	  "scripts": {
	    "test": "cd ./tests; mocha-phantomjs index.html;"
	  },
	  "readme": "# Overlay\n\nReally stupidly simple overlay for browser.\nDepends on jQuery, uses [q](library), instance of [EventEmitter](http://nodejs.org/api/events.html).\n\n## Usage\n\n```\nvar Overlay = require('overlay');\n\nOverlay.show().then(function() {\n\tconsole.log('I have just been opened');\n});\n\nOverlay.hide().then(function() {\n\tconsole.log('I have just been closed');\n});\n```\n\n## Options\n\nThere are few options for styling this overlay.\n\n* color [black]: fill overlay with color\n* opacity [0.8]\n* zIndex [1000]\n* duration [fast]: animation speed for jquery animation\n* scrollable [false]: if this is true and overlay shows up, then window scroll bar disappear.\n\n```\nvar options = {\n\tcolor: 'red'\n};\n\nOverlay.show(options);\n```\n\n## Events\n\nOverlay has got these events:\n\n* show: fired after show method is called\n* shown: fired after show animation finished\n* hide: fired after hide method is called\n* hidden: fired after hide animation finished\n\n```\nOverlay.on('shown', function() {\n\talert('Congratulation');\n});\n```\n\n## Changelog\n\n* 1.2.4\n\t+ Removed forgotten debug code\n\n* 1.2.3\n\t+ Added tests\n\n* 1.2.1 - 1.2.2\n\t+ Bug fix\n\n* 1.2.0\n\t+ Instance of EventEmitter\n\t+ Events moved into EventEmitter\n\t+ Improvements in doc",
	  "readmeFilename": "README.md",
	  "bugs": {
	    "url": "https://github.com/sakren/node-overlay/issues"
	  },
	  "_id": "overlay@1.2.4",
	  "_from": "overlay@~1.2.4"
	}
	
	}).call(this);
	

}, 'content-ready/package.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'content-ready/package.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'content-ready/package.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'content-ready/package.json';
	var __dirname = 'content-ready';
	var process = {cwd: function() {return '/';}, argv: ['node', 'content-ready/package.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
	  "name": "content-ready",
	  "description": "Listen for moment when content of element is ready (even with all images).",
	  "version": "1.0.0",
	  "author": {
	    "name": "David Kudera",
	    "email": "sakren@gmail.com"
	  },
	  "keywords": [
	    "browser",
	    "content",
	    "ready",
	    "element"
	  ],
	  "repository": {
	    "type": "git",
	    "url": "git@github.com:sakren/node-content-ready.git"
	  },
	  "license": "MIT",
	  "engines": {
	    "node": "*"
	  },
	  "main": "./lib/Ready.js",
	  "dependencies": {
	    "q": "latest"
	  },
	  "devDependencies": {
	    "mocha": "latest",
	    "chai": "latest"
	  },
	  "scripts": {
	    "test": "cd ./tests; mocha-phantomjs index.html;"
	  },
	  "readme": "# content-ready\n\nListen for moment when content of element is ready (even with all images).\n\nDepends on jquery, uses [q](https://npmjs.org/package/q) promise library.\n\nThis library is useful when you need to know when for example all images in some element are loaded.\n\n## Installation\n\n```\n$ npm install content-ready\n```\n\n## Usage\n\n```\nvar ready = require('content-ready');\n\nready($('#someRandomElement')).then(function(el) {\n\tconsole.log('all images were loaded.');\n});\n```\n\n## Changelog\n\n* 1.0.0\n\t+ First version",
	  "readmeFilename": "README.md",
	  "bugs": {
	    "url": "https://github.com/sakren/node-content-ready/issues"
	  },
	  "_id": "content-ready@1.0.0",
	  "_from": "content-ready@~1.0.0"
	}
	
	}).call(this);
	

}, 'Dialog': function(exports, module) { module.exports = window.require('/src/Dialog'); }
, 'ConfirmDialog': function(exports, module) { module.exports = window.require('/src/ConfirmDialog'); }
, 'q': function(exports, module) { module.exports = window.require('q/q.js'); }
, 'overlay': function(exports, module) { module.exports = window.require('overlay/lib/Overlay.js'); }
, 'content-ready': function(exports, module) { module.exports = window.require('content-ready/lib/Ready.js'); }

});
require.__setStats({"q/q.js":{"atime":1385458624000,"mtime":1378314231000,"ctime":1383727273000},"overlay/lib/Overlay.js":{"atime":1385458624000,"mtime":1379361057000,"ctime":1383727273000},"content-ready/lib/Ready.js":{"atime":1385458624000,"mtime":1379354855000,"ctime":1383727273000},"/src/ConfirmDialog.coffee":{"atime":1385458625000,"mtime":1383727263000,"ctime":1383727263000},"/src/Dialog.coffee":{"atime":1385458708000,"mtime":1385458701000,"ctime":1385458701000},"events":{"atime":1385458624000,"mtime":1384294487000,"ctime":1384764305000},"/test/tests/ConfirmDialog.coffee":{"atime":1385458625000,"mtime":1383733644000,"ctime":1383733644000},"/test/tests/Dialog.coffee":{"atime":1385458625000,"mtime":1383733254000,"ctime":1383733254000},"/package.json":{"atime":1385458624000,"mtime":1385458603000,"ctime":1385458603000},"/lib/Dialog.js":{"atime":1385458712000,"mtime":1385458708000,"ctime":1385458708000},"q/package.json":{"atime":1385458624000,"mtime":1383727273000,"ctime":1383727273000},"overlay/package.json":{"atime":1385458624000,"mtime":1383727273000,"ctime":1383727273000},"content-ready/package.json":{"atime":1385458624000,"mtime":1383727273000,"ctime":1383727273000}});
require.version = '5.1.3';

/** run section **/

/** /test/tests/Dialog **/
require('/test/tests/Dialog');

/** /test/tests/ConfirmDialog **/
require('/test/tests/ConfirmDialog');