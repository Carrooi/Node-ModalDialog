// Generated by CoffeeScript 1.6.3
(function() {
  var Dialog, Overlay, Q, dialog;

  Dialog = require('Dialog');

  Overlay = require('overlay');

  Q = require('q');

  Q.stopUnhandledRejectionTracking();

  dialog = null;

  describe('Dialog', function() {
    beforeEach(function() {
      return dialog = new Dialog;
    });
    afterEach(function() {
      if (Overlay.el) {
        Overlay.el.remove();
        Overlay.el = null;
      }
      if (dialog.el) {
        dialog.el.remove();
        dialog.el = null;
      }
      Overlay.visible = false;
      Dialog.visible = null;
      return Dialog.closing = false;
    });
    describe('#show()', function() {
      it('should show and create dialog element', function(done) {
        return dialog.show().then(function() {
          expect(dialog.el).not.to.be["null"];
          expect(dialog.el.is(':visible')).to.be["true"];
          expect(Dialog.visible).to.be.equal(dialog);
          return done();
        }).done();
      });
      it('should return an error if dialog is already open', function(done) {
        return dialog.show().then(function() {
          return dialog.show().fail(function(err) {
            expect(err).to.be["instanceof"](Error);
            return done();
          }).done();
        }).done();
      });
      it('should return an error if another dialog is open', function(done) {
        var d;
        d = new Dialog;
        return d.show().then(function() {
          return dialog.show().fail(function(err) {
            expect(err).to.be["instanceof"](Error);
            return d.hide().then(function() {
              return done();
            }).done();
          }).done();
        }).done();
      });
      it('element of new dialog should be empty', function(done) {
        return dialog.show().then(function() {
          expect(dialog.el.html()).to.be.equal('');
          return done();
        }).done();
      });
      it('should set title of dialog', function(done) {
        dialog.title = 'some title';
        return dialog.show().then(function() {
          var title;
          title = $(dialog.el).find('div.header span.title');
          expect(title.length).to.be.equal(1);
          expect(title.html()).to.be.equal('some title');
          return done();
        }).done();
      });
      it('should set html header', function(done) {
        dialog.header = $('<span class="my-header">header</span>');
        return dialog.show().then(function() {
          var header;
          header = $(dialog.el).find('div.header');
          expect(header.length).to.be.equal(1);
          expect(header.html()).to.be.equal('<span class="my-header">header</span>');
          return done();
        }).done();
      });
      it('should set some content', function(done) {
        dialog.content = 'my content';
        return dialog.show().then(function() {
          var content;
          content = $(dialog.el).find('div.content');
          expect(content.length).to.be.equal(1);
          expect(content.html()).to.be.equal('my content');
          return done();
        }).done();
      });
      it('should add some buttons', function(done) {
        dialog.addButton('ok');
        return dialog.show().then(function() {
          var buttons;
          buttons = $(dialog.el).find('div.buttons a');
          expect(buttons.length).to.be.equal(1);
          expect(buttons.html()).to.be.equal('ok');
          return done();
        }).done();
      });
      it('should set simple information text', function(done) {
        dialog.info = 'info text';
        return dialog.show().then(function() {
          var info;
          info = $(dialog.el).find('div.footer span.info');
          expect(info.length).to.be.equal(1);
          expect(info.html()).to.be.equal('info text');
          return done();
        }).done();
      });
      return it('should set html footer', function(done) {
        dialog.footer = $('<div class="my-footer">footer</div>');
        return dialog.show().then(function() {
          var footer;
          footer = $(dialog.el).find('div.footer');
          expect(footer.length).to.be.equal(1);
          expect(footer.html()).to.be.equal('<div class="my-footer">footer</div>');
          return done();
        }).done();
      });
    });
    describe('#addButton()', function() {
      it('should add three buttons', function() {
        dialog.addButton('ok');
        dialog.addButton('cancel');
        return expect(dialog.buttons.length).to.be.equal(2);
      });
      it('should call button action after it is clicked', function(done) {
        dialog.addButton('ok', function() {
          return done();
        });
        return dialog.show().then(function() {
          var button;
          button = $(dialog.el).find('div.buttons a');
          return button.click();
        }).done();
      });
      return it('should call right button action when it is clicked', function(done) {
        dialog.addButton('cancel');
        dialog.addButton('ok', function() {
          return done();
        });
        dialog.addButton('close');
        return dialog.show().then(function() {
          var button;
          button = $(dialog.el).find('div.buttons a:nth-child(2)');
          return button.click();
        });
      });
    });
    describe('#isOpen()', function() {
      it('should return false when dialog is closed', function() {
        return expect(dialog.isOpen()).to.be["false"];
      });
      it('should return true when dialog is open', function(done) {
        return dialog.show().then(function() {
          expect(dialog.isOpen()).to.be["true"];
          return done();
        }).done();
      });
      return it('should return false after dialog is again closed', function(done) {
        return dialog.show().then(function() {
          return dialog.hide().then(function() {
            expect(dialog.isOpen()).to.be["false"];
            return done();
          }).done();
        }).done();
      });
    });
    return describe('#hide()', function() {
      it('should hide created dialog', function(done) {
        return dialog.show().then(function() {
          return dialog.hide().then(function() {
            expect(dialog.el.is(':hidden')).to.be["true"];
            expect(Dialog.visible).to.be["null"];
            return done();
          }).done();
        }).done();
      });
      return it('should return an error if dialog is not open', function(done) {
        return dialog.hide().fail(function(err) {
          expect(err).to.be["instanceof"](Error);
          return done();
        }).done();
      });
    });
  });

}).call(this);
