// Generated by CoffeeScript 1.6.3
(function() {
  var $, Dialog, EventEmitter, Overlay, Q, ready,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Q = require('q');

  Overlay = require('overlay');

  ready = require('content-ready');

  EventEmitter = require('events').EventEmitter;

  $ = null;

  Dialog = (function(_super) {
    __extends(Dialog, _super);

    Dialog.visible = null;

    Dialog.closing = false;

    Dialog.overlayRegistered = false;

    Dialog.classes = {
      container: 'modal_dialog',
      title: 'title',
      header: 'header',
      content: 'content',
      footer: 'footer',
      info: 'info',
      buttons: 'buttons',
      button: 'button'
    };

    Dialog.styles = true;

    Dialog.prototype.options = null;

    Dialog.prototype.title = null;

    Dialog.prototype.header = null;

    Dialog.prototype.content = null;

    Dialog.prototype.footer = null;

    Dialog.prototype.info = null;

    Dialog.prototype.buttons = null;

    Dialog.prototype.width = 430;

    Dialog.prototype.maxHeight = 400;

    Dialog.prototype.zIndex = 100000;

    Dialog.prototype.duration = 'fast';

    Dialog.prototype.el = null;

    Dialog.prototype.elements = null;

    function Dialog(jquery) {
      var err,
        _this = this;
      if (jquery == null) {
        jquery = null;
      }
      if (jquery === null) {
        try {
          jquery = require('jquery');
        } catch (_error) {
          err = _error;
          jquery = window.jQuery;
        }
      }
      if (!jquery) {
        throw new Error('jquery is not defined.');
      }
      $ = jquery;
      this.buttons = [];
      this.elements = {};
      if (Dialog.overlayRegistered === false) {
        Dialog.overlayRegistered = true;
        Overlay.on('hide', function() {
          if (Dialog.visible !== null && Dialog.closing === false) {
            return Dialog.visible.hide();
          }
        });
      }
    }

    Dialog.prototype.addButton = function(title, action) {
      this.buttons.push({
        title: title,
        action: action
      });
      return this;
    };

    Dialog.prototype.parseOptions = function(options) {
      if (options == null) {
        options = {};
      }
      if (typeof options.width === 'undefined') {
        options.width = this.width;
      }
      if (typeof options.maxHeight === 'undefined') {
        options.maxHeight = this.maxHeight;
      }
      if (typeof options.duration === 'undefined') {
        options.duration = this.duration;
      }
      if (typeof options.zIndex === 'undefined') {
        options.zIndex = this.zIndex;
      }
      if (typeof options.styles === 'undefined') {
        options.styles = Dialog.styles;
      }
      if (typeof options.classes === 'undefined') {
        options.classes = {};
      }
      if (typeof options.overlay === 'undefined') {
        options.overlay = {};
      }
      if (typeof options.classes.container === 'undefined') {
        options.classes.container = Dialog.classes.container;
      }
      if (typeof options.classes.title === 'undefined') {
        options.classes.title = Dialog.classes.title;
      }
      if (typeof options.classes.header === 'undefined') {
        options.classes.header = Dialog.classes.header;
      }
      if (typeof options.classes.content === 'undefined') {
        options.classes.content = Dialog.classes.content;
      }
      if (typeof options.classes.footer === 'undefined') {
        options.classes.footer = Dialog.classes.footer;
      }
      if (typeof options.classes.info === 'undefined') {
        options.classes.info = Dialog.classes.info;
      }
      if (typeof options.classes.buttons === 'undefined') {
        options.classes.buttons = Dialog.classes.buttons;
      }
      if (typeof options.classes.button === 'undefined') {
        options.classes.button = Dialog.classes.button;
      }
      options.overlay.duration = options.duration;
      return options;
    };

    Dialog.prototype.renderHeader = function() {
      if (typeof this.elements.header === 'undefined') {
        this.elements.header = $('<div>', {
          'class': this.options.classes.header
        });
      }
      this.elements.header.html('');
      if (this.header || this.title) {
        if (this.header) {
          this.elements.header.html(this.header);
        } else {
          this.elements.header.html('<span class="' + this.options.classes.title + '">' + this.title + '</span>');
        }
      }
      return this.elements.header;
    };

    Dialog.prototype.renderContent = function() {
      if (typeof this.elements.content === 'undefined') {
        this.elements.content = $('<div>', {
          'class': this.options.classes.content
        });
      }
      this.elements.content.html('');
      if (this.content !== null) {
        this.elements.content.html(this.content);
      }
      return this.elements.content;
    };

    Dialog.prototype.renderFooter = function() {
      var button, _fn, _i, _len, _ref,
        _this = this;
      if (typeof this.elements.footer === 'undefined') {
        this.elements.footer = $('<div>', {
          'class': this.options.classes.footer
        });
      }
      this.elements.footer.html('');
      if (typeof this.elements.info !== 'undefined') {
        delete this.elements.info;
      }
      if (typeof this.elements.buttons !== 'undefined') {
        delete this.elements.buttons;
      }
      if (this.footer || this.info || this.buttons.length > 0) {
        if (this.footer) {
          this.elements.footer.html(this.footer);
        } else {
          if (this.info) {
            this.elements.info = $('<span class="' + this.options.classes.info + '">' + this.info + '</span>').appendTo(this.elements.footer);
          }
          if (this.buttons.length > 0) {
            this.elements.buttons = $('<div class="' + this.options.classes.buttons + '">');
            _ref = this.buttons;
            _fn = function(button) {
              return $('<a>', {
                html: button.title,
                href: '#',
                'class': _this.options.classes.button,
                click: function(e) {
                  e.preventDefault();
                  return button.action.call(_this);
                }
              }).appendTo(_this.elements.buttons);
            };
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              button = _ref[_i];
              _fn(button);
            }
            this.elements.buttons.appendTo(this.elements.footer);
          }
        }
      }
      return this.elements.footer;
    };

    Dialog.prototype.refreshStyles = function(type) {
      var styles;
      if (type == null) {
        type = null;
      }
      if (type === null || type === 'header') {
        if (this.elements.header.html() === '') {
          this.elements.header.removeAttr('styles');
        } else if (this.options.styles) {
          this.elements.header.css({
            borderBottom: '1px solid black',
            paddingBottom: '8px'
          });
        }
      }
      if (type === null || type === 'content') {
        styles = {
          maxHeight: this.options.maxHeight,
          overflow: 'hidden',
          overflowX: 'auto',
          overflowY: 'auto'
        };
        if (this.elements.content.html() === '') {
          this.elements.content.removeAttr('styles');
        } else if (this.options.styles) {
          styles.borderBottom = '1px solid black';
          styles.paddingTop = '8px';
          styles.paddingBottom = '8px';
        }
        this.elements.content.css(styles);
      }
      if (type === null || type === 'footer') {
        if (this.elements.footer.html() === '') {
          return this.elements.footer.removeAttr('styles');
        } else if (this.options.styles) {
          this.elements.footer.css({
            paddingTop: '8px'
          });
          if (!this.footer && this.buttons.length > 0) {
            return this.elements.buttons.css({
              'float': 'right'
            });
          }
        }
      }
    };

    Dialog.prototype.render = function() {
      var styles;
      if (this.options === null) {
        this.options = this.parseOptions();
      }
      this.el = $('<div>', {
        'class': this.options.classes.container,
        css: {
          display: 'none',
          position: 'fixed',
          left: '50%',
          top: '50%'
        }
      }).appendTo($('body'));
      styles = {
        zIndex: this.options.zIndex,
        width: this.options.width,
        marginLeft: -(this.options.width / 2),
        marginTop: -(this.options.maxHeight / 2)
      };
      if (this.options.styles) {
        styles.border = '1px solid black';
        styles.backgroundColor = 'white';
        styles.padding = '10px 12px 10px 12px';
      }
      this.el.css(styles);
      this.el.append(this.renderHeader());
      this.el.append(this.renderContent());
      this.el.append(this.renderFooter());
      return this.refreshStyles();
    };

    Dialog.prototype.moveToCenter = function() {
      var deferred,
        _this = this;
      deferred = Q.defer();
      this.el.css({
        display: 'block',
        visibility: 'hidden'
      });
      ready(this.el).then(function() {
        var height;
        height = parseInt(_this.el.css('height'));
        _this.el.css({
          visibility: 'visible',
          marginTop: -(height / 2)
        });
        return deferred.resolve(_this);
      });
      return deferred.promise;
    };

    Dialog.prototype.show = function(options) {
      var deferred,
        _this = this;
      if (options == null) {
        options = {};
      }
      if (Dialog.visible === null) {
        this.emit('beforeShow', this);
        this.options = this.parseOptions(options);
        if (this.el === null) {
          this.render();
        }
        deferred = Q.defer();
        this.moveToCenter().then(function() {
          var done, finish;
          finish = function() {
            _this.emit('afterShow', _this);
            return deferred.resolve(_this);
          };
          done = {
            overlay: false,
            dialog: false
          };
          Overlay.show(_this.options.overlay).then(function() {
            done.overlay = true;
            if (done.dialog) {
              return finish(deferred);
            }
          });
          return _this.el.fadeIn(_this.options.duration, function(e) {
            Dialog.visible = _this;
            done.dialog = true;
            if (done.overlay) {
              return finish(deferred);
            }
          });
        });
        return deferred.promise;
      } else if (Dialog.visible === this) {
        return Q.reject(new Error('This modal dialog is already open.'));
      } else {
        return Q.reject(new Error('Another modal dialog is open.'));
      }
    };

    Dialog.prototype.hide = function() {
      var deferred,
        _this = this;
      deferred = Q.defer();
      if (!this.isOpen()) {
        deferred.reject(new Error('This window is not open.'));
      } else {
        this.emit('beforeHide');
        Dialog.closing = true;
        Overlay.hide();
        this.el.fadeOut(function() {
          Dialog.visible = null;
          Dialog.closing = false;
          _this.emit('afterHide', _this);
          return deferred.resolve(_this);
        });
      }
      return deferred.promise;
    };

    Dialog.prototype.changeTitle = function(title) {
      this.title = title;
      this.header = null;
      this.renderHeader();
      this.refreshStyles('header');
      return this;
    };

    Dialog.prototype.changeContent = function(content) {
      this.content = content;
      if (this.content === null) {
        this.elements.content.html('');
      }
      this.renderContent();
      this.refreshStyles('content');
      return this;
    };

    Dialog.prototype.changeInfo = function(info) {
      this.info = info;
      if (this.info === null && typeof this.elements.info !== 'undefined') {
        this.elements.info.remove();
        delete this.elements.info;
      }
      this.renderFooter();
      this.refreshStyles('footer');
      return this;
    };

    Dialog.prototype.isOpen = function() {
      return Dialog.visible === this;
    };

    return Dialog;

  })(EventEmitter);

  module.exports = Dialog;

}).call(this);
